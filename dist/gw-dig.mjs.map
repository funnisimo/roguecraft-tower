{"version":3,"file":"gw-dig.mjs","sources":["../ts/site/tile.ts","../ts/feature/feature.ts","../ts/feature/tile.ts","../ts/feature/chance.ts","../ts/feature/spread.ts","../ts/site/horde.ts","../ts/site/item.ts","../ts/site/utils.ts","../ts/site/analyze.ts","../ts/site/site.ts","../ts/site/log/logger.ts","../ts/build/buildStep.ts","../ts/site/log/consoleLogger.ts","../ts/site/log/index.ts","../ts/types.ts","../ts/room.ts","../ts/hall.ts","../ts/lake.ts","../ts/bridge.ts","../ts/stairs.ts","../ts/loop.ts","../ts/digger.ts","../ts/dungeon.ts","../ts/build/data.ts","../ts/build/blueprint.ts","../ts/build/builder.ts"],"sourcesContent":["import * as GWU from 'gw-utils';\n\nexport { TileId } from '../types';\n// export type ToTileId = (name: TileId) => number;\n\nexport interface TileConfig {\n    blocksMove?: boolean;\n    blocksVision?: boolean;\n    blocksPathing?: boolean;\n\n    connectsLevel?: boolean;\n    secretDoor?: boolean;\n    door?: boolean;\n\n    stairs?: boolean;\n    liquid?: boolean;\n    impregnable?: boolean;\n\n    tags?: string | string[];\n    priority?: number | string;\n    ch?: string;\n\n    extends?: string;\n}\n\nexport interface TileOptions extends TileConfig {\n    id: string;\n}\n\nexport interface TileInfo extends TileOptions {\n    id: string;\n    index: number;\n    priority: number;\n    tags: string[];\n}\n\nexport const tileIds: Record<string, number> = {};\nexport const allTiles: TileInfo[] = [];\n\nexport function installTile(cfg: TileOptions): TileInfo;\nexport function installTile(id: string, opts?: TileConfig): TileInfo;\nexport function installTile(\n    id: string | TileOptions,\n    opts: TileConfig = {}\n): TileInfo {\n    if (typeof id !== 'string') {\n        opts = id;\n        id = id.id;\n    }\n    const base = { id, index: allTiles.length, priority: 0, tags: [] };\n\n    opts.extends = opts.extends || id;\n\n    if (opts.extends) {\n        const root = getTile(opts.extends);\n        if (root) {\n            Object.assign(base, root);\n        } else if (opts.extends !== id) {\n            throw new Error('Cannot extend tile: ' + opts.extends);\n        }\n    }\n\n    const info: TileInfo = GWU.object.assignOmitting(\n        'priority, extends',\n        base,\n        opts\n    ) as TileInfo;\n\n    info.id = id;\n    info.index = allTiles.length;\n\n    if (opts.tags) {\n        info.tags = GWU.tags.make(opts.tags);\n    }\n\n    if (typeof opts.priority === 'string') {\n        let text = opts.priority.replace(/ /g, '');\n        let index = text.search(/[+-]/);\n        if (index == 0) {\n            info.priority = info.priority + Number.parseInt(text);\n        } else if (index == -1) {\n            if (text.search(/[a-zA-Z]/) == 0) {\n                const tile = getTile(text);\n                if (!tile)\n                    throw new Error(\n                        'Failed to find tile for priority - ' + text + '.'\n                    );\n                info.priority = tile.priority;\n            } else {\n                info.priority = Number.parseInt(text);\n            }\n        } else {\n            const id = text.substring(0, index);\n            const delta = Number.parseInt(text.substring(index));\n            const tile = getTile(id);\n            if (!tile)\n                throw new Error(\n                    'Failed to find tile for priority - ' + id + '.'\n                );\n\n            info.priority = tile.priority + delta;\n        }\n    } else if (opts.priority !== undefined) {\n        info.priority = opts.priority;\n    }\n\n    if (info.blocksPathing === undefined) {\n        if (info.blocksMove) {\n            info.blocksPathing = true;\n        }\n    }\n\n    if (tileIds[id]) {\n        info.index = tileIds[id];\n        allTiles[info.index] = info;\n    } else {\n        allTiles.push(info);\n        tileIds[id] = info.index;\n    }\n\n    return info;\n}\n\nexport function getTile(name: string | number): TileInfo {\n    if (typeof name === 'string') {\n        name = tileIds[name];\n    }\n    return allTiles[name];\n}\n\nexport function tileId(name: string | number): number {\n    if (typeof name === 'number') return name;\n    return tileIds[name] ?? -1;\n}\n\nexport function blocksMove(name: string | number): boolean {\n    const info = getTile(name);\n    return info.blocksMove || false;\n}\n\ntileIds['NOTHING'] = tileIds['NULL'] = installTile('NONE', {\n    priority: 0,\n    ch: '',\n}).index;\n\ninstallTile('FLOOR', { priority: 10, ch: '.' });\ninstallTile('WALL', {\n    blocksMove: true,\n    blocksVision: true,\n    priority: 50,\n    ch: '#',\n});\ninstallTile('DOOR', {\n    blocksVision: true,\n    door: true,\n    priority: 60,\n    ch: '+',\n});\ninstallTile('SECRET_DOOR', {\n    blocksMove: true,\n    secretDoor: true,\n    priority: 70,\n    ch: '%',\n});\ninstallTile('UP_STAIRS', {\n    stairs: true,\n    priority: 80,\n    ch: '>',\n});\ninstallTile('DOWN_STAIRS', {\n    stairs: true,\n    priority: 80,\n    ch: '<',\n});\ntileIds['DEEP'] = installTile('LAKE', {\n    priority: 40,\n    liquid: true,\n    ch: '~',\n}).index;\ninstallTile('SHALLOW', { priority: 30, ch: '`' });\ninstallTile('BRIDGE', { priority: 45, ch: '=' }); // layers help here\ninstallTile('IMPREGNABLE', {\n    priority: 200,\n    ch: '%',\n    impregnable: true,\n    blocksMove: true,\n    blocksVision: true,\n});\n","import * as GWU from 'gw-utils';\nimport { Site } from '../site';\n\nexport interface FeatureObj {\n    [key: string]: any;\n}\nexport type FeatureConfig = string | FeatureObj;\n\nexport type FeatureFn = (site: Site, x: number, y: number) => boolean;\nexport type MakeFn = (cfg: any) => FeatureFn;\n\nexport const features: Record<string, FeatureFn> = {};\n\nexport function install(name: string, fn: FeatureFn | FeatureConfig) {\n    if (typeof fn !== 'function') {\n        fn = make(fn);\n    }\n    features[name] = fn as FeatureFn;\n}\n\nexport const types: Record<string, MakeFn> = {};\n\nexport function installType(name: string, fn: MakeFn) {\n    types[name] = fn;\n}\n\n// FEATURE TYPE\n\nexport function feature(id: string | string[] | { id: string }): FeatureFn {\n    if (Array.isArray(id)) id = id[0];\n    if (id && typeof id !== 'string') {\n        id = id.id;\n    }\n    if (!id || !id.length) throw new Error('Feature effect needs ID');\n\n    return featureFeature.bind(undefined, id);\n}\n\nexport function featureFeature(\n    id: string,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const feat = features[id];\n    if (!feat) {\n        throw new Error('Failed to find feature: ' + id);\n    }\n\n    return feat(site, x, y);\n}\n\ninstallType('feature', feature);\ninstallType('effect', feature);\ninstallType('id', feature);\n\nexport function make(obj: FeatureConfig): FeatureFn;\nexport function make(id: string, config: FeatureConfig): FeatureFn;\nexport function make(\n    id: string | FeatureConfig,\n    config?: FeatureConfig\n): FeatureFn {\n    if (!id) return GWU.FALSE;\n    if (typeof id === 'string') {\n        if (!id.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        if (!config) {\n            const parts = id.split(':');\n            id = parts.shift()!.toLowerCase();\n            config = parts;\n        }\n        // string with no parameters is interpreted as id of registered feature\n        if (config.length === 0) {\n            config = id;\n            id = 'feature';\n        }\n        const handler = types[id];\n        if (!handler) throw new Error('Failed to find effect - ' + id);\n        return handler(config || {});\n    }\n    let steps: FeatureFn[];\n\n    if (Array.isArray(id)) {\n        steps = id\n            .map((config) => make(config))\n            .filter((a) => a !== null) as FeatureFn[];\n    } else if (typeof id === 'function') {\n        return id as FeatureFn;\n    } else {\n        steps = Object.entries(id)\n            .map(([key, config]) => make(key, config))\n            .filter((a) => a !== null) as FeatureFn[];\n    }\n    if (steps.length === 1) {\n        return steps[0];\n    }\n\n    return (site, x, y) => {\n        return steps.every((step) => step(site, x, y));\n    };\n}\n\nexport function makeArray(cfg: string): FeatureFn[];\nexport function makeArray(obj: FeatureObj): FeatureFn[];\nexport function makeArray(arr: FeatureFn[]): FeatureFn[];\nexport function makeArray(\n    cfg: string | FeatureFn | FeatureObj | FeatureFn[]\n): FeatureFn[] {\n    if (!cfg) return [];\n    if (Array.isArray(cfg)) {\n        return cfg\n            .map((c) => make(c))\n            .filter((fn) => fn !== null) as FeatureFn[];\n    }\n    if (typeof cfg === 'string') {\n        if (!cfg.length)\n            throw new Error('Cannot create effect from empty string.');\n\n        const parts = cfg.split(':');\n        cfg = parts.shift()!.toLowerCase();\n\n        const handler = types[cfg];\n        if (!handler) return [];\n        return [handler(parts)];\n    } else if (typeof cfg === 'function') {\n        return [cfg] as FeatureFn[];\n    }\n\n    const steps = Object.entries(cfg).map(([key, config]) => make(key, config));\n    return steps.filter((s) => s !== null) as FeatureFn[];\n}\n","import { SetTileOptions, Site } from '../site';\nimport { FeatureFn, installType } from './feature';\n\n//////////////////////////////////////////////\n// TILE\n\nexport interface TileOptions extends SetTileOptions {\n    id: string;\n    protected?: boolean;\n}\n\nexport function tile(src: string | TileOptions): FeatureFn {\n    if (!src) throw new Error('Tile effect needs configuration.');\n\n    if (typeof src === 'string') {\n        src = { id: src };\n    } else if (Array.isArray(src)) {\n        src = { id: src[0] };\n    } else if (!src.id) {\n        throw new Error('Tile effect needs configuration with id.');\n    }\n\n    const opts: TileOptions = src;\n    if (opts.id.includes('!')) {\n        opts.superpriority = true;\n    }\n    if (opts.id.includes('~')) {\n        opts.blockedByActors = true;\n        opts.blockedByItems = true;\n    }\n    // if (opts.id.includes('+')) {\n    //     opts.protected = true;\n    // }\n    opts.id = opts.id.replace(/[!~+]*/g, '');\n\n    return tileAction.bind(undefined, opts);\n}\n\nexport function tileAction(\n    cfg: TileOptions,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    cfg.machine = 0; // >???<\n    if (site.setTile(x, y, cfg.id, cfg)) {\n        return true;\n    }\n    return false;\n}\n\ninstallType('tile', tile);\n","import { Site } from '../site';\nimport { installType, FeatureFn } from './feature';\n\n//////////////////////////////////////////////\n// chance\n\nexport function chance(opts: any): FeatureFn {\n    if (Array.isArray(opts)) {\n        opts = opts[0];\n    }\n    if (typeof opts === 'object') {\n        opts = opts.chance;\n    }\n    if (typeof opts === 'string') {\n        if (opts.endsWith('%')) {\n            opts = Number.parseFloat(opts) * 100;\n        } else {\n            opts = Number.parseInt(opts || '10000');\n        }\n    }\n    if (typeof opts !== 'number') {\n        throw new Error(\n            'Chance effect config must be number or string that can be a number.'\n        );\n    }\n    return chanceAction.bind(undefined, opts);\n}\n\nexport function chanceAction(cfg: number, site: Site): boolean {\n    return site.rng.chance(cfg, 10000);\n}\n\ninstallType('chance', chance);\n","import * as GWU from 'gw-utils';\nimport { Site, tileId } from '../site';\nimport { FeatureFn, FeatureConfig, installType, makeArray } from './feature';\n\nconst Fl = GWU.flag.fl;\n\n///////////////////////////////////////////////////////\n// TILE EVENT\n\nexport enum Flags {\n    // E_ALWAYS_FIRE = Fl(10), // Fire even if the cell is marked as having fired this turn\n    // E_NEXT_ALWAYS = Fl(0), // Always fire the next effect, even if no tiles changed.\n    // E_NEXT_EVERYWHERE = Fl(1), // next effect spawns in every cell that this effect spawns in, instead of only the origin\n\n    // E_FIRED = Fl(2), // has already been fired once\n\n    // E_NO_MARK_FIRED = Fl(3), // Do not mark this cell as having fired an effect (so can log messages multiple times)\n    // MUST_REPLACE_LAYER\n    // NEEDS_EMPTY_LAYER\n    // E_PROTECTED = Fl(4),\n\n    // E_NO_REDRAW_CELL = Fl(),\n    E_TREAT_AS_BLOCKING = Fl(5), // If filling the footprint of this effect with walls would disrupt level connectivity, then abort.\n    E_PERMIT_BLOCKING = Fl(6), // Generate this effect without regard to level connectivity.\n    E_ABORT_IF_BLOCKS_MAP = Fl(7),\n    E_BLOCKED_BY_ITEMS = Fl(8), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_ACTORS = Fl(9), // Do not fire this effect in a cell that has an item.\n    E_BLOCKED_BY_OTHER_LAYERS = Fl(10), // Will not propagate into a cell if any layer in that cell has a superior priority.\n    E_SUPERPRIORITY = Fl(11), // Will overwrite terrain of a superior priority.\n\n    E_IGNORE_FOV = Fl(12),\n\n    // E_SPREAD_CIRCLE = Fl(13), // Spread in a circle around the spot (using FOV), radius calculated using spread+decrement\n    // E_SPREAD_LINE = Fl(14), // Spread in a line in one random direction\n\n    E_EVACUATE_CREATURES = Fl(15), // Creatures in the effect area get moved outside of it\n    E_EVACUATE_ITEMS = Fl(16), // Creatures in the effect area get moved outside of it\n\n    E_BUILD_IN_WALLS = Fl(17),\n    E_MUST_TOUCH_WALLS = Fl(18),\n    E_NO_TOUCH_WALLS = Fl(19),\n\n    E_CLEAR_GROUND = Fl(21), // clear all existing tiles\n    E_CLEAR_SURFACE = Fl(22),\n    E_CLEAR_LIQUID = Fl(23),\n    E_CLEAR_GAS = Fl(24),\n\n    E_CLEAR_TILE = Fl(25), // Clear this tile\n\n    E_CLEAR_CELL = E_CLEAR_GROUND |\n        E_CLEAR_SURFACE |\n        E_CLEAR_LIQUID |\n        E_CLEAR_GAS,\n\n    E_ONLY_IF_EMPTY = E_BLOCKED_BY_ITEMS | E_BLOCKED_BY_ACTORS,\n    // E_NULLIFY_CELL = E_NULL_SURFACE | E_NULL_LIQUID | E_NULL_GAS,\n\n    // These should be effect types\n    // E_ACTIVATE_DORMANT_MONSTER = Fl(27), // Dormant monsters on this tile will appear -- e.g. when a statue bursts to reveal a monster.\n    // E_AGGRAVATES_MONSTERS = Fl(28), // Will act as though an aggravate monster scroll of effectRadius radius had been read at that point.\n    // E_RESURRECT_ALLY = Fl(29), // Will bring back to life your most recently deceased ally.\n}\n\nexport interface SpreadInfo {\n    grow: number;\n    decrement: number;\n    matchTile: string;\n    features: FeatureFn[];\n    flags: number;\n}\n\nexport interface SpreadConfig\n    extends Partial<Omit<SpreadInfo, 'flags' | 'features'>> {\n    features?: FeatureConfig;\n    flags?: GWU.flag.FlagBase;\n}\n\nexport interface SpreadFn extends FeatureFn {\n    config: SpreadInfo;\n}\n\nexport type SpreadArgs = [number, number, FeatureConfig, SpreadConfig?];\n\nexport function spread(config: SpreadArgs | SpreadConfig): SpreadFn;\nexport function spread(\n    grow: number,\n    decrement: number,\n    action: FeatureConfig,\n    opts?: SpreadConfig\n): SpreadFn;\nexport function spread(...args: any[]): SpreadFn {\n    let config = {} as SpreadInfo;\n    if (!args.length) {\n        throw new Error('Must have config to create spread.');\n    }\n    if (args.length === 1) {\n        if (typeof args[0] === 'string') {\n            args = args[0].split(':').map((t) => t.trim());\n        } else if (Array.isArray(args[0])) {\n            args = args[0];\n        } else {\n            Object.assign(config, args[0]);\n            args = [config];\n        }\n    }\n    if (args.length >= 3) {\n        Object.assign(config, args[3] || {});\n        config.grow = Number.parseInt(args[0]);\n        config.decrement = Number.parseInt(args[1]);\n        config.features = args[2];\n    } else if (args.length === 2) {\n        throw new Error('Must have actions to run for spread.');\n    }\n\n    if (typeof config.grow !== 'number')\n        config.grow = Number.parseInt(config.grow || 0);\n    if (typeof config.decrement !== 'number')\n        config.decrement = Number.parseInt(config.decrement || 100);\n    config.flags = GWU.flag.from(Flags, config.flags || 0);\n    config.matchTile = config.matchTile || '';\n\n    if (\n        typeof config.features === 'string' &&\n        // @ts-ignore\n        config.features.indexOf(':') < 0\n    ) {\n        if (tileId(config.features) >= 0) {\n            // @ts-ignore\n            config.features = 'TILE:' + config.features;\n        }\n    }\n\n    const action = makeArray(config.features);\n    if (!action) throw new Error('Failed to make action for spread.');\n    config.features = action;\n\n    const fn = spreadFeature.bind(undefined, config) as SpreadFn;\n    fn.config = config;\n    return fn;\n}\n\ninstallType('spread', spread);\n\nexport function spreadFeature(\n    cfg: SpreadInfo,\n    site: Site,\n    x: number,\n    y: number\n): boolean {\n    const abortIfBlocking = !!(cfg.flags & Flags.E_ABORT_IF_BLOCKS_MAP);\n\n    const map = site;\n    let didSomething = false;\n\n    const spawnMap = GWU.grid.alloc(map.width, map.height);\n\n    if (!computeSpawnMap(cfg, spawnMap, site, x, y)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (abortIfBlocking && mapDisruptedBy(map, spawnMap)) {\n        GWU.grid.free(spawnMap);\n        return false;\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_CREATURES) {\n        // first, evacuate creatures, so that they do not re-trigger the tile.\n        if (evacuateCreatures(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_EVACUATE_ITEMS) {\n        // first, evacuate items, so that they do not re-trigger the tile.\n        if (evacuateItems(map, spawnMap)) {\n            didSomething = true;\n        }\n    }\n\n    if (cfg.flags & Flags.E_CLEAR_CELL) {\n        // first, clear other tiles (not base/ground)\n        if (clearCells(map, spawnMap, cfg.flags)) {\n            didSomething = true;\n        }\n    }\n\n    spawnMap.update((v) => {\n        if (!v) return 0;\n        return 1;\n    });\n\n    cfg.features.forEach((fn, i) => {\n        spawnMap.forEach((v, x, y) => {\n            if (v !== i + 1) return;\n\n            if (fn(site, x, y)) {\n                didSomething = true;\n                spawnMap[x][y] += 1;\n            }\n        });\n    });\n\n    if (didSomething) {\n        didSomething = true;\n    }\n    GWU.grid.free(spawnMap);\n    return didSomething;\n}\n\nexport function mapDisruptedBy(\n    map: Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(map.width, map.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(map.width, map.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (map.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (!map.blocksMove(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGWU.grid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\n// Spread\n\nfunction cellIsOk(\n    effect: SpreadInfo,\n    map: Site,\n    x: number,\n    y: number,\n    isStart: boolean\n) {\n    if (!map.hasXY(x, y)) return false;\n    if (map.isProtected(x, y)) return false;\n\n    if (map.blocksEffects(x, y) && !effect.matchTile && !isStart) {\n        return false;\n    }\n\n    if (effect.flags & Flags.E_BUILD_IN_WALLS) {\n        if (!map.isWall(x, y)) return false;\n    } else if (effect.flags & Flags.E_MUST_TOUCH_WALLS) {\n        let ok = false;\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = true;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    } else if (effect.flags & Flags.E_NO_TOUCH_WALLS) {\n        let ok = true;\n        if (map.isWall(x, y)) return false; // or on wall\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (map.isWall(i, j)) {\n                    ok = false;\n                }\n            },\n            true\n        );\n        if (!ok) return false;\n    }\n\n    // if (ctx.bounds && !ctx.bounds.containsXY(x, y)) return false;\n    if (effect.matchTile && !isStart && !map.hasTile(x, y, effect.matchTile)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function computeSpawnMap(\n    effect: SpreadInfo,\n    spawnMap: GWU.grid.NumGrid,\n    site: Site,\n    x: number,\n    y: number\n) {\n    let i, j, dir, t, x2, y2;\n    let madeChange;\n\n    // const bounds = ctx.bounds || null;\n    // if (bounds) {\n    //   // Activation.debug('- bounds', bounds);\n    // }\n\n    const map = site;\n    let startProb = effect.grow || 0;\n    let probDec = effect.decrement || 0;\n\n    spawnMap.fill(0);\n\n    if (!cellIsOk(effect, map, x, y, true)) {\n        return false;\n    }\n\n    spawnMap[x][y] = t = 1; // incremented before anything else happens\n    let count = 1;\n\n    if (startProb) {\n        madeChange = true;\n        if (startProb >= 100) {\n            probDec = probDec || 100;\n        }\n\n        if (probDec <= 0) {\n            probDec = startProb;\n        }\n        while (madeChange && startProb > 0) {\n            madeChange = false;\n            t++;\n            for (i = 0; i < map.width; i++) {\n                for (j = 0; j < map.height; j++) {\n                    if (spawnMap[i][j] == t - 1) {\n                        for (dir = 0; dir < 4; dir++) {\n                            x2 = i + GWU.xy.DIRS[dir][0];\n                            y2 = j + GWU.xy.DIRS[dir][1];\n                            if (\n                                spawnMap.hasXY(x2, y2) &&\n                                !spawnMap[x2][y2] &&\n                                map.rng.chance(startProb) &&\n                                cellIsOk(effect, map, x2, y2, false)\n                            ) {\n                                spawnMap[x2][y2] = t;\n                                madeChange = true;\n                                ++count;\n                            }\n                        }\n                    }\n                }\n            }\n            startProb -= probDec;\n        }\n    }\n\n    return count > 0;\n}\n\nexport function clearCells(map: Site, spawnMap: GWU.grid.NumGrid, _flags = 0) {\n    let didSomething = false;\n    // const clearAll = (flags & Flags.E_CLEAR_CELL) === Flags.E_CLEAR_CELL;\n    spawnMap.forEach((v, i, j) => {\n        if (!v) return;\n\n        // if (clearAll) {\n        map.clearTile(i, j);\n        // } else {\n        //     if (flags & Flags.E_CLEAR_GAS) {\n        //         cell.clearDepth(Flags.Depth.GAS);\n        //     }\n        //     if (flags & Flags.E_CLEAR_LIQUID) {\n        //         cell.clearDepth(Flags.Depth.LIQUID);\n        //     }\n        //     if (flags & Flags.E_CLEAR_SURFACE) {\n        //         cell.clearDepth(Flags.Depth.SURFACE);\n        //     }\n        //     if (flags & Flags.E_CLEAR_GROUND) {\n        //         cell.clearDepth(Flags.Depth.GROUND);\n        //     }\n        // }\n        didSomething = true;\n    });\n    return didSomething;\n}\n\nexport function evacuateCreatures(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachActor((a) => {\n        if (!blockingMap[a.x][a.y]) return;\n        const loc = map.rng.matchingLocNear(a.x, a.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsActor(x, y, a);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            a.y = loc[0];\n            a.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n\nexport function evacuateItems(map: Site, blockingMap: GWU.grid.NumGrid) {\n    let didSomething = false;\n    map.eachItem((i) => {\n        if (!blockingMap[i.x][i.y]) return;\n        const loc = map.rng.matchingLocNear(i.x, i.y, (x, y) => {\n            if (!map.hasXY(x, y)) return false;\n            if (blockingMap[x][y]) return false;\n            return !map.forbidsItem(x, y, i);\n        });\n        if (loc && loc[0] >= 0 && loc[1] >= 0) {\n            i.x = loc[0];\n            i.y = loc[1];\n            // map.redrawXY(loc[0], loc[1]);\n            didSomething = true;\n        }\n    });\n    return didSomething;\n}\n","import * as GWU from 'gw-utils';\nimport { ItemInstance } from './item';\nimport * as FEATURE from '../feature';\nimport { Site } from '../site';\n\nexport type HordeId = string;\n\nexport interface ActorInstance {\n    id: string;\n    make: Record<string, any>;\n    x: number;\n    y: number;\n    machine: number;\n    leader?: ActorInstance; // number??\n    item?: ItemInstance;\n}\n\nexport interface MemberConfig {\n    count?: GWU.range.RangeBase;\n    make?: Record<string, any>;\n}\n\nexport interface HordeConfig {\n    id?: string;\n    leader: HordeId;\n    make?: Record<string, any>;\n    members?: Record<HordeId, GWU.range.RangeBase | MemberConfig>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string; // ID\n    feature?: string; // ID\n    blueprint?: string; // ID\n}\n\nexport interface MemberInfo {\n    count: GWU.range.Range;\n    make: Record<string, any>;\n}\n\nexport interface HordeInfo {\n    id?: string;\n    leader: HordeId;\n    make: Record<string, any>;\n    members: Record<HordeId, MemberInfo>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: FEATURE.FeatureFn | null;\n    blueprint: string | null;\n}\n\nexport const hordes: HordeInfo[] = [];\n\nexport function installHorde(config: HordeConfig): HordeInfo {\n    const info = {} as HordeInfo;\n    info.id = config.id || config.leader;\n    info.leader = config.leader;\n    info.make = config.make || {};\n    info.members = {};\n    if (config.members) {\n        Object.entries(config.members).forEach(([key, value]) => {\n            let member = {} as MemberInfo;\n            if (\n                typeof value === 'object' &&\n                ('count' in value || 'make' in value)\n            ) {\n                member.count = GWU.range.make(value.count || 1);\n                member.make = value.make || {};\n            } else {\n                // @ts-ignore\n                member.count = GWU.range.make(value);\n            }\n            info.members[key] = member;\n        });\n    }\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature ? FEATURE.make(config.feature) : null;\n    info.blueprint = config.blueprint || null;\n\n    hordes.push(info);\n\n    return info;\n}\n\nexport function pickHorde(\n    depth: number,\n    rules: string | { id: string } | { tags: string | string[] },\n    rng?: GWU.rng.Random\n): HordeInfo | null {\n    rng = rng || GWU.random;\n    let tagMatch: GWU.tags.TagMatchFn;\n    if (typeof rules === 'string') {\n        tagMatch = GWU.tags.makeMatch(rules);\n    } else if ('id' in rules) {\n        return hordes.find((h) => h.id === rules.id) || null;\n    } else {\n        tagMatch = GWU.tags.makeMatch(rules);\n    }\n\n    const choices = hordes.filter((horde) => tagMatch(horde.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport interface HordeFlagsType {\n    horde: number;\n}\n\nexport interface SpawnOptions {\n    canSpawn: GWU.xy.XYMatchFunc;\n    rng: GWU.rng.Random;\n    machine: number;\n}\n\nexport function spawnHorde(\n    info: HordeInfo,\n    map: Site,\n    x = -1,\n    y = -1,\n    opts: Partial<SpawnOptions> = {}\n): ActorInstance | null {\n    // Leader info\n    opts.canSpawn = opts.canSpawn || GWU.TRUE;\n    opts.rng = opts.rng || map.rng;\n    opts.machine = opts.machine || 0;\n\n    const leader = _spawnLeader(info, map, x, y, opts as SpawnOptions);\n    if (!leader) return null;\n\n    _spawnMembers(info, leader, map, opts as SpawnOptions);\n    return leader;\n}\n\nfunction _spawnLeader(\n    info: HordeInfo,\n    map: Site,\n    x: number,\n    y: number,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const leader: ActorInstance = {\n        id: info.leader,\n        make: info.make,\n        x,\n        y,\n        machine: opts.machine || 0,\n    };\n\n    if (x >= 0 && y >= 0) {\n        if (!map.canSpawnActor(x, y, leader)) return null;\n    } else {\n        [x, y] = _pickLeaderLoc(leader, map, opts) || [-1, -1];\n        if (x < 0 || y < 0) {\n            return null;\n        }\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addLeader(leader, map, x, y, opts)) {\n        return null;\n    }\n\n    return leader;\n}\n\nfunction _addLeader(\n    leader: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    _opts: SpawnOptions\n): number {\n    return map.addActor(x, y, leader);\n}\n\nfunction _addMember(\n    member: ActorInstance,\n    map: Site,\n    x: number,\n    y: number,\n    leader: ActorInstance,\n    _opts: SpawnOptions\n): number {\n    member.leader = leader;\n    return map.addActor(x, y, member);\n}\n\nfunction _spawnMembers(\n    horde: HordeInfo,\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): number {\n    const entries = Object.entries(horde.members);\n\n    if (entries.length == 0) return 0;\n\n    let count = 0;\n    entries.forEach(([kindId, config]) => {\n        const count = config.count.value(opts.rng);\n        for (let i = 0; i < count; ++i) {\n            _spawnMember(kindId, config, map, leader, opts);\n        }\n    });\n\n    return count;\n}\n\nfunction _spawnMember(\n    id: string,\n    member: MemberInfo,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): ActorInstance | null {\n    const instance = {\n        id,\n        make: member.make,\n        x: -1,\n        y: -1,\n        machine: leader.machine,\n    };\n\n    const [x, y] = _pickMemberLoc(instance, map, leader, opts) || [-1, -1];\n    if (x < 0 || y < 0) {\n        return null;\n    }\n\n    // pre-placement stuff?  machine? effect?\n\n    if (!_addMember(instance, map, x, y, leader, opts)) {\n        return null;\n    }\n\n    return instance;\n}\n\nfunction _pickLeaderLoc(\n    leader: ActorInstance,\n    map: Site,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLoc(map.width, map.height, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n\n        if (map.hasActor(x, y)) return false; // Brogue kills existing actors, but lets do this instead\n\n        if (!opts.canSpawn(x, y)) return false;\n        if (!map.canSpawnActor(x, y, leader)) return false;\n        // const cell = map.cell(x, y);\n\n        // if (leader.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return true;\n    });\n    return loc;\n}\n\nfunction _pickMemberLoc(\n    actor: ActorInstance,\n    map: Site,\n    leader: ActorInstance,\n    opts: SpawnOptions\n): GWU.xy.Loc | null {\n    let loc = opts.rng.matchingLocNear(leader.x, leader.y, (x, y) => {\n        if (!map.hasXY(x, y)) return false;\n        if (map.hasActor(x, y)) return false;\n        // if (map.fov.isAnyKindOfVisible(x, y)) return false;\n\n        if (!map.canSpawnActor(x, y, actor)) return false;\n        if (!opts.canSpawn(x, y)) return false;\n        return true;\n    });\n    return loc;\n}\n","import * as GWU from 'gw-utils';\n\nexport type ItemId = string;\n\nexport interface ItemInstance {\n    id: string;\n    make?: Record<string, any>;\n    key?: { x: number; y: number; disposable?: boolean };\n    x: number; // -1 means not on map (carried)\n    y: number; // -1 means not on map\n}\n\nexport interface ItemConfig {\n    id: ItemId;\n    make?: Record<string, any>;\n\n    tags?: GWU.tags.TagBase;\n    frequency?: GWU.frequency.FrequencyConfig;\n\n    // flags?: GWU.flag.FlagBase;\n    requiredTile?: string;\n    feature?: string;\n    blueprint?: string;\n}\n\nexport interface ItemMatchOptions {\n    tags: string | string[];\n    forbidTags: string | string[];\n    rng?: GWU.rng.Random;\n}\n\nexport interface ItemInfo {\n    id: ItemId;\n    make: Record<string, any>;\n\n    tags: string[];\n    frequency: GWU.frequency.FrequencyFn;\n\n    flags: number;\n    requiredTile: string | null;\n    feature: string | null;\n    blueprint: string | null;\n}\n\nexport const items: ItemInfo[] = [];\n\nexport function installItem(config: ItemConfig): ItemInfo;\nexport function installItem(id: string, cfg: Omit<ItemConfig, 'id'>): ItemInfo;\nexport function installItem(\n    config: ItemConfig | string,\n    cfg?: Omit<ItemConfig, 'id'>\n): ItemInfo {\n    const info = {} as ItemInfo;\n    if (typeof config === 'string') {\n        info.id = config;\n        if (!cfg) throw new Error('Need a configuration.');\n        config = cfg as ItemConfig;\n    } else {\n        info.id = config.id;\n    }\n\n    info.make = config.make || {};\n\n    info.tags = [];\n    if (config.tags) {\n        if (typeof config.tags === 'string') {\n            config.tags = config.tags.split(/[:|,]/g).map((t) => t.trim());\n        }\n        info.tags = config.tags;\n    }\n\n    info.frequency = GWU.frequency.make(config.frequency || 100);\n    info.flags = 0;\n\n    info.requiredTile = config.requiredTile || null;\n    info.feature = config.feature || null;\n    info.blueprint = config.blueprint || null;\n\n    items.push(info);\n\n    return info;\n}\n\nexport function pickItem(\n    depth: number,\n    tagRules: string | { tags: string } | { id: string },\n    rng?: GWU.rng.Random\n): ItemInfo | null {\n    rng = rng || GWU.random;\n    if (typeof tagRules !== 'string' && 'id' in tagRules) {\n        // @ts-ignore\n        return items.find((i) => i.id === tagRules.id) || null;\n    }\n    tagRules = typeof tagRules === 'string' ? tagRules : tagRules.tags;\n    const tagMatch = GWU.tags.makeMatch(tagRules);\n    const choices = items.filter((item) => tagMatch(item.tags));\n    if (choices.length == 0) return null;\n\n    const freq = choices.map((info) => info.frequency(depth));\n    const choice = rng.weighted(freq);\n    return choices[choice] || null;\n}\n\nexport function makeItem(info: ItemInfo): ItemInstance {\n    return {\n        id: info.id,\n        make: info.make,\n        x: -1,\n        y: -1,\n    };\n}\n\nexport function getItemInfo(id: string): ItemInfo | undefined {\n    return items.find((i) => i.id === id);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as DIG from './site';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function loadSite(\n    site: DIG.Site,\n    cells: string[],\n    tiles: Record<string, string>\n) {\n    const w = site.width;\n    const h = site.height;\n\n    cells.forEach((line, j) => {\n        if (j >= h) return;\n        for (let i = 0; i < w && i < line.length; ++i) {\n            const ch = line[i];\n            const tile = tiles[ch] || 'FLOOR';\n\n            site.setTile(i, j, tile);\n        }\n    });\n}\n\n// export function attachRoom(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ) {\n//     // console.log('attachRoom');\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const site = new SITE.GridSite(map);\n\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (!(map.get(x, y) == SITE.NOTHING)) continue;\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const oppDir = (dir + 2) % 4;\n//             const door = doorSites[oppDir];\n//             if (!door) continue;\n\n//             const offsetX = x - door[0];\n//             const offsetY = y - door[1];\n\n//             if (door[0] != -1 && roomFitsAt(map, roomGrid, offsetX, offsetY)) {\n//                 // TYPES.Room fits here.\n//                 GWU.grid.offsetZip(\n//                     map,\n//                     roomGrid,\n//                     offsetX,\n//                     offsetY,\n//                     (_d, _s, i, j) => {\n//                         map[i][j] = opts.room.tile || SITE.FLOOR;\n//                     }\n//                 );\n\n//                 attachDoor(map, room, opts, x, y, oppDir);\n\n//                 // door[0] = -1;\n//                 // door[1] = -1;\n//                 room.translate(offsetX, offsetY);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachDoor(\n//     map: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo,\n//     x: number,\n//     y: number,\n//     dir: number\n// ) {\n//     if (opts.door === 0) return; // no door at all\n\n//     const tile = opts.door || SITE.DOOR;\n//     map[x][y] = tile; // Door site.\n//     // most cases...\n//     if (!room.hall || !(room.hall.width > 1) || room.hall.dir !== dir) {\n//         return;\n//     }\n\n//     if (dir === GWU.utils.UP || dir === GWU.utils.DOWN) {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x - k, y) === 0) {\n//                 if (map.get(x - k, y - 1) && map.get(x - k, y + 1)) {\n//                     map[x - k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x + k, y) === 0) {\n//                 if (map.get(x + k, y - 1) && map.get(x + k, y + 1)) {\n//                     map[x + k][y] = tile;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     } else {\n//         let didSomething = true;\n//         let k = 1;\n//         while (didSomething) {\n//             didSomething = false;\n\n//             if (map.get(x, y - k) === 0) {\n//                 if (map.get(x - 1, y - k) && map.get(x + 1, y - k)) {\n//                     map[x][y - k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             if (map.get(x, y + k) === 0) {\n//                 if (map.get(x - 1, y + k) && map.get(x + 1, y + k)) {\n//                     map[x][y + k] = opts.door;\n//                     didSomething = true;\n//                 }\n//             }\n//             ++k;\n//         }\n//     }\n// }\n\n// export function roomFitsAt(\n//     map: GWU.grid.NumGrid,\n//     roomGrid: GWU.grid.NumGrid,\n//     roomToSiteX: number,\n//     roomToSiteY: number\n// ) {\n//     let xRoom, yRoom, xSite, ySite, i, j;\n\n//     // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n//     for (xRoom = 0; xRoom < roomGrid.width; xRoom++) {\n//         for (yRoom = 0; yRoom < roomGrid.height; yRoom++) {\n//             if (roomGrid[xRoom][yRoom]) {\n//                 xSite = xRoom + roomToSiteX;\n//                 ySite = yRoom + roomToSiteY;\n\n//                 for (i = xSite - 1; i <= xSite + 1; i++) {\n//                     for (j = ySite - 1; j <= ySite + 1; j++) {\n//                         if (\n//                             !map.hasXY(i, j) ||\n//                             map.isBoundaryXY(i, j) ||\n//                             !(map.get(i, j) === SITE.NOTHING)\n//                         ) {\n//                             // console.log('- NO');\n//                             return false;\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n//     // console.log('- YES');\n//     return true;\n// }\n\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(\n    site: DIG.Site,\n    x: number,\n    y: number\n): number {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n\n    solutionDir = GWU.xy.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (\n            site.hasXY(oppX, oppY) &&\n            site.hasXY(newX, newY) &&\n            site.isFloor(oppX, oppY)\n        ) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != GWU.xy.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return GWU.xy.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n\nexport function chooseRandomDoorSites(site: DIG.Site): GWU.xy.Loc[] {\n    let i, j, k, newX, newY;\n    let dir;\n    let doorSiteFailed;\n\n    const DOORS: GWU.xy.Loc[][] = [[], [], [], []];\n\n    // const grid = GWU.grid.alloc(sourceGrid.width, sourceGrid.height);\n    // grid.copy(sourceGrid);\n\n    const h = site.height;\n    const w = site.width;\n\n    for (i = 0; i < w; i++) {\n        for (j = 0; j < h; j++) {\n            if (site.isDiggable(i, j)) {\n                dir = directionOfDoorSite(site, i, j);\n                if (dir != GWU.xy.NO_DIRECTION) {\n                    // Trace a ray 10 spaces outward from the door site to make sure it doesn't intersect the room.\n                    // If it does, it's not a valid door site.\n                    newX = i + GWU.xy.DIRS[dir][0];\n                    newY = j + GWU.xy.DIRS[dir][1];\n                    doorSiteFailed = false;\n                    for (\n                        k = 0;\n                        k < 10 && site.hasXY(newX, newY) && !doorSiteFailed;\n                        k++\n                    ) {\n                        if (site.isSet(newX, newY)) {\n                            doorSiteFailed = true;\n                        }\n                        newX += GWU.xy.DIRS[dir][0];\n                        newY += GWU.xy.DIRS[dir][1];\n                    }\n                    if (!doorSiteFailed) {\n                        DOORS[dir].push([i, j]);\n                    }\n                }\n            }\n        }\n    }\n\n    let doorSites: GWU.xy.Loc[] = [];\n    // Pick four doors, one in each direction, and store them in doorSites[dir].\n    for (dir = 0; dir < 4; dir++) {\n        const loc = site.rng.item(DOORS[dir]) || [-1, -1];\n        doorSites[dir] = [loc[0], loc[1]];\n    }\n\n    // GWU.grid.free(grid);\n    return doorSites;\n}\n\n// export function forceRoomAtMapLoc(\n//     map: GWU.grid.NumGrid,\n//     xy: GWU.xy.Loc,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigConfig\n// ) {\n//     // console.log('forceRoomAtMapLoc', xy);\n\n//     const site = new SITE.GridSite(map);\n\n//     // Slide room across map, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < SITE.SEQ.length; i++) {\n//         const x = Math.floor(SITE.SEQ[i] / map.height);\n//         const y = SITE.SEQ[i] % map.height;\n\n//         if (roomGrid[x][y]) continue;\n\n//         const dir = directionOfDoorSite(site, x, y);\n//         if (dir != GWU.xy.NO_DIRECTION) {\n//             const dx = xy[0] - x;\n//             const dy = xy[1] - y;\n//             if (roomFitsAt(map, roomGrid, dx, dy)) {\n//                 GWU.grid.offsetZip(map, roomGrid, dx, dy, (_d, _s, i, j) => {\n//                     map[i][j] = opts.room.tile || SITE.FLOOR;\n//                 });\n//                 if (opts.room.door !== false) {\n//                     const door =\n//                         opts.room.door === true || !opts.room.door\n//                             ? SITE.DOOR\n//                             : opts.room.door;\n//                     map[xy[0]][xy[1]] = door; // Door site.\n//                 }\n//                 // TODO - Update doors - we may have to erase one...\n//                 room.translate(dx, dy);\n//                 return true;\n//             }\n//         }\n//     }\n\n//     return false;\n// }\n\n// export function attachRoomAtMapDoor(\n//     map: GWU.grid.NumGrid,\n//     mapDoors: GWU.xy.Loc[],\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorIndexes = site.rng.sequence(mapDoors.length);\n\n//     // console.log('attachRoomAtMapDoor', mapDoors.join(', '));\n//     // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n//     for (let i = 0; i < doorIndexes.length; i++) {\n//         const index = doorIndexes[i];\n//         const door = mapDoors[index];\n//         if (!door) continue;\n//         const x = door[0];\n//         const y = door[1];\n\n//         if (attachRoomAtXY(map, x, y, roomGrid, room, opts)) {\n//             return true;\n//         }\n//     }\n\n//     return false;\n// }\n\n// function attachRoomAtXY(\n//     map: GWU.grid.NumGrid,\n//     x: number,\n//     y: number,\n//     roomGrid: GWU.grid.NumGrid,\n//     room: TYPES.Room,\n//     opts: TYPES.DigInfo\n// ): boolean | GWU.xy.Loc[] {\n//     const doorSites = room.hall ? room.hall.doors : room.doors;\n//     const dirs = site.rng.sequence(4);\n\n//     // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n//     for (let dir of dirs) {\n//         const oppDir = (dir + 2) % 4;\n//         const door = doorSites[oppDir];\n//         if (!door) continue;\n\n//         if (\n//             door[0] != -1 &&\n//             roomFitsAt(map, roomGrid, x - door[0], y - door[1])\n//         ) {\n//             // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n//             // TYPES.Room fits here.\n//             const offX = x - door[0];\n//             const offY = y - door[1];\n//             GWU.grid.offsetZip(map, roomGrid, offX, offY, (_d, _s, i, j) => {\n//                 map[i][j] = opts.room.tile || SITE.FLOOR;\n//             });\n//             attachDoor(map, room, opts, x, y, oppDir);\n//             room.translate(offX, offY);\n//             // const newDoors = doorSites.map((site) => {\n//             //     const x0 = site[0] + offX;\n//             //     const y0 = site[1] + offY;\n//             //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n//             //     return [x0, y0] as GWU.xy.Loc;\n//             // });\n//             return true;\n//         }\n//     }\n//     return false;\n// }\n\nexport function fillCostGrid(source: DIG.Site, costGrid: GWU.grid.NumGrid) {\n    costGrid.update((_v, x, y) =>\n        source.isPassable(x, y) ? 1 : GWU.path.OBSTRUCTION\n    );\n}\n\nexport interface DisruptOptions {\n    offsetX: number; // blockingGridOffsetX\n    offsetY: number; // blockingGridOffsetY\n    machine: number;\n    updateWalkable: (grid: GWU.grid.NumGrid) => boolean; // true = ok to proceed, false = disrupts\n}\n\nexport function siteDisruptedByXY(\n    site: DIG.Site,\n    x: number,\n    y: number,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    if (\n        GWU.xy.arcCount(x, y, (i, j) => {\n            return site.isPassable(i, j);\n        }) <= 1\n    )\n        return false;\n\n    const blockingGrid = GWU.grid.alloc(site.width, site.height);\n    blockingGrid[x][y] = 1;\n    const result = siteDisruptedBy(site, blockingGrid, options);\n    GWU.grid.free(blockingGrid);\n    return result;\n}\n\nexport function siteDisruptedBy(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    options: Partial<DisruptOptions> = {}\n) {\n    options.offsetX ??= 0;\n    options.offsetY ??= 0;\n    options.machine ??= 0;\n\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = false;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const blockingX = i + options.offsetX!;\n        const blockingY = j + options.offsetY!;\n        if (blockingGrid.get(blockingX, blockingY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = true;\n            }\n        } else if (\n            site.isPassable(i, j) &&\n            (site.getMachine(i, j) == 0 ||\n                site.getMachine(i, j) == options.machine)\n        ) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (options.updateWalkable) {\n        if (!options.updateWalkable(walkableGrid)) {\n            return true;\n        }\n    }\n\n    let first = true;\n    for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n        for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                if (first) {\n                    walkableGrid.floodFill(i, j, 1, 2);\n                    first = false;\n                } else {\n                    disrupts = true;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function siteDisruptedSize(\n    site: DIG.Site,\n    blockingGrid: GWU.grid.NumGrid,\n    blockingToMapX = 0,\n    blockingToMapY = 0\n) {\n    const walkableGrid = GWU.grid.alloc(site.width, site.height);\n    let disrupts = 0;\n\n    // Get all walkable locations after lake added\n    GWU.xy.forRect(site.width, site.height, (i, j) => {\n        const lakeX = i + blockingToMapX;\n        const lakeY = j + blockingToMapY;\n        if (blockingGrid.get(lakeX, lakeY)) {\n            if (site.isStairs(i, j)) {\n                disrupts = site.width * site.height;\n            }\n        } else if (site.isPassable(i, j)) {\n            walkableGrid[i][j] = 1;\n        }\n    });\n\n    if (disrupts) return disrupts;\n\n    let first = true;\n    let nextId = 2;\n    let minSize = site.width * site.height;\n    for (let i = 0; i < walkableGrid.width; ++i) {\n        for (let j = 0; j < walkableGrid.height; ++j) {\n            if (walkableGrid[i][j] == 1) {\n                const disrupted = walkableGrid.floodFill(i, j, 1, nextId++);\n                minSize = Math.min(minSize, disrupted);\n                if (first) {\n                    first = false;\n                } else {\n                    disrupts = minSize;\n                }\n            }\n        }\n    }\n\n    // console.log('WALKABLE GRID');\n    // walkableGrid.dump();\n\n    GWU.grid.free(walkableGrid);\n    return disrupts;\n}\n\nexport function computeDistanceMap(\n    site: DIG.Site,\n    distanceMap: GWU.path.DijkstraMap,\n    originX: number,\n    originY: number,\n    _maxDistance: number\n) {\n    distanceMap.reset(site.width, site.height);\n    distanceMap.setGoal(originX, originY);\n    distanceMap.calculate((x, y) => {\n        if (!site.hasXY(x, y)) return GWU.path.OBSTRUCTION;\n        if (site.isPassable(x, y)) return GWU.path.OK;\n        if (site.blocksDiagonal(x, y)) return GWU.path.OBSTRUCTION;\n        return GWU.path.BLOCKED;\n    }, false);\n}\n\nexport function clearInteriorFlag(site: DIG.Site, machine: number) {\n    for (let i = 0; i < site.width; i++) {\n        for (let j = 0; j < site.height; j++) {\n            if (site.getMachine(i, j) == machine && !site.needsMachine(i, j)) {\n                site.setMachine(i, j, 0);\n            }\n        }\n    }\n}\n","import * as GWU from 'gw-utils';\n\nexport interface AnalysisBase {\n    readonly height: number;\n    readonly width: number;\n\n    hasXY: GWU.xy.XYMatchFunc;\n\n    blocksPathing: GWU.xy.XYMatchFunc;\n    blocksMove: GWU.xy.XYMatchFunc;\n    blocksDiagonal: GWU.xy.XYMatchFunc;\n    isSecretDoor: GWU.xy.XYMatchFunc;\n}\n\nexport interface LoopSite extends AnalysisBase {\n    setInLoop: GWU.xy.XYFunc;\n    clearInLoop: GWU.xy.XYFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport interface ChokeSite extends AnalysisBase {\n    clearChokepoint: GWU.xy.XYFunc;\n    setChokepoint: GWU.xy.XYFunc;\n    isChokepoint: GWU.xy.XYMatchFunc;\n    setChokeCount(x: number, y: number, count: number): void;\n    getChokeCount(x: number, y: number): number;\n\n    setGateSite: GWU.xy.XYFunc;\n    clearGateSite: GWU.xy.XYFunc;\n    isGateSite: GWU.xy.XYMatchFunc;\n\n    isAreaMachine: GWU.xy.XYMatchFunc;\n    isInLoop: GWU.xy.XYMatchFunc;\n}\n\nexport type AnalysisSite = LoopSite & ChokeSite;\n\nexport function analyze(map: AnalysisSite, updateChokeCounts = true) {\n    updateLoopiness(map);\n    updateChokepoints(map, updateChokeCounts);\n}\n\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n// TODO - Move to Map?\n\nexport function updateChokepoints(map: ChokeSite, updateCounts: boolean) {\n    const blockMap = GWU.grid.alloc(map.width, map.height);\n    const grid = GWU.grid.alloc(map.width, map.height);\n\n    for (let i = 0; i < map.width; i++) {\n        for (let j = 0; j < map.height; j++) {\n            if (map.blocksDiagonal(i, j)) {\n                blockMap[i][j] = 2;\n            } else if (\n                (map.blocksPathing(i, j) || map.blocksMove(i, j)) &&\n                !map.isSecretDoor(i, j)\n            ) {\n                // cell.flags &= ~Flags.Cell.IS_IN_LOOP;\n                blockMap[i][j] = 1;\n            } else {\n                // cell.flags |= Flags.Cell.IS_IN_LOOP;\n                blockMap[i][j] = 0;\n            }\n        }\n    }\n\n    let passableArcCount;\n\n    // done finding loops; now flag chokepoints\n    for (let i = 1; i < blockMap.width - 1; i++) {\n        for (let j = 1; j < blockMap.height - 1; j++) {\n            map.clearChokepoint(i, j);\n            if (!blockMap[i][j]) {\n                if (!map.isInLoop(i, j)) {\n                    passableArcCount = 0;\n                    for (let dir = 0; dir < 8; dir++) {\n                        const oldX = i + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][0];\n                        const oldY = j + GWU.xy.CLOCK_DIRS[(dir + 7) % 8][1];\n                        const newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                        const newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n                        if (\n                            (map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                                blockMap[newX][newY] > 0) !=\n                            (map.hasXY(oldX, oldY) && // RUT.Map.makeValidXy(map, oldXy) &&\n                                blockMap[oldX][oldY] > 0)\n                        ) {\n                            if (++passableArcCount > 2) {\n                                if (\n                                    (blockMap[i - 1][j] &&\n                                        blockMap[i + 1][j]) ||\n                                    (blockMap[i][j - 1] && blockMap[i][j + 1])\n                                ) {\n                                    map.setChokepoint(i, j);\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                const left = i - 1;\n                const right = i + 1;\n                const up = j - 1;\n                const down = j + 1;\n\n                if (blockMap[i][up] && blockMap[i][down]) {\n                    if (!blockMap[left][j] && !blockMap[right][j]) {\n                        if (\n                            !blockMap[left][up] ||\n                            !blockMap[left][down] ||\n                            !blockMap[right][up] ||\n                            !blockMap[right][down]\n                        ) {\n                            map.setGateSite(i, j);\n                        }\n                    }\n                } else if (blockMap[left][j] && blockMap[right][j]) {\n                    if (!blockMap[i][up] && !blockMap[i][down]) {\n                        if (\n                            !blockMap[left][up] ||\n                            !blockMap[left][down] ||\n                            !blockMap[right][up] ||\n                            !blockMap[right][down]\n                        ) {\n                            map.setGateSite(i, j);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (updateCounts) {\n        // Done finding chokepoints; now create a chokepoint map.\n\n        // The chokepoint map is a number for each passable tile. If the tile is a chokepoint,\n        // then the number indicates the number of tiles that would be rendered unreachable if the\n        // chokepoint were blocked. If the tile is not a chokepoint, then the number indicates\n        // the number of tiles that would be rendered unreachable if the nearest exit chokepoint\n        // were blocked.\n        // The cost of all of this is one depth-first flood-fill per open point that is adjacent to a chokepoint.\n\n        // Start by setting the chokepoint values really high, and roping off room machines.\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                map.setChokeCount(i, j, 30000);\n                // Not sure why this was done in Brogue\n                // if (map.cell(i, j).flags.cell & Flags.Cell.IS_IN_ROOM_MACHINE) {\n                //     passMap[i][j] = 0;\n                // }\n            }\n        }\n\n        // Scan through and find a chokepoint next to an open point.\n\n        for (let i = 0; i < map.width; i++) {\n            for (let j = 0; j < map.height; j++) {\n                if (!blockMap[i][j] && map.isChokepoint(i, j)) {\n                    for (let dir = 0; dir < 4; dir++) {\n                        const newX = i + GWU.xy.DIRS[dir][0];\n                        const newY = j + GWU.xy.DIRS[dir][1];\n                        if (\n                            map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                            !blockMap[newX][newY] &&\n                            !map.isChokepoint(newX, newY)\n                        ) {\n                            // OK, (newX, newY) is an open point and (i, j) is a chokepoint.\n                            // Pretend (i, j) is blocked by changing passMap, and run a flood-fill cell count starting on (newX, newY).\n                            // Keep track of the flooded region in grid[][].\n                            grid.fill(0);\n                            blockMap[i][j] = 1;\n                            let cellCount = floodFillCount(\n                                map,\n                                grid,\n                                blockMap,\n                                newX,\n                                newY\n                            );\n                            blockMap[i][j] = 0;\n\n                            // CellCount is the size of the region that would be obstructed if the chokepoint were blocked.\n                            // CellCounts less than 4 are not useful, so we skip those cases.\n\n                            if (cellCount >= 4) {\n                                // Now, on the chokemap, all of those flooded cells should take the lesser of their current value or this resultant number.\n                                for (let i2 = 0; i2 < grid.width; i2++) {\n                                    for (let j2 = 0; j2 < grid.height; j2++) {\n                                        if (\n                                            grid[i2][j2] &&\n                                            cellCount <\n                                                map.getChokeCount(i2, j2)\n                                        ) {\n                                            map.setChokeCount(\n                                                i2,\n                                                j2,\n                                                cellCount\n                                            );\n                                            // map.clearGateSite(i2, j2);\n                                        }\n                                    }\n                                }\n\n                                // The chokepoint itself should also take the lesser of its current value or the flood count.\n                                if (cellCount < map.getChokeCount(i, j)) {\n                                    map.setChokeCount(i, j, cellCount);\n                                    // map.setGateSite(i, j);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    GWU.grid.free(blockMap);\n    GWU.grid.free(grid);\n}\n\n// Assumes it is called with respect to a passable (startX, startY), and that the same is not already included in results.\n// Returns 10000 if the area included an area machine.\nexport function floodFillCount(\n    map: ChokeSite,\n    results: GWU.grid.NumGrid,\n    blockMap: GWU.grid.NumGrid,\n    startX: number,\n    startY: number\n) {\n    function getCount(x: number, y: number): number {\n        let count = 1;\n\n        if (map.isAreaMachine(x, y)) {\n            // huh?\n            count = 10000;\n        }\n        return count;\n    }\n\n    let count = 0;\n    const todo: GWU.xy.Loc[] = [[startX, startY]];\n    const free: GWU.xy.Loc[] = [];\n\n    while (todo.length) {\n        const item = todo.pop()!;\n        free.push(item);\n        const x = item[0];\n        const y = item[1];\n        if (results[x][y]) continue;\n\n        results[x][y] = 1;\n        count += getCount(x, y);\n\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = x + GWU.xy.DIRS[dir][0];\n            const newY = y + GWU.xy.DIRS[dir][1];\n\n            if (\n                map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, newXy) &&\n                !blockMap[newX][newY] &&\n                !results[newX][newY]\n            ) {\n                const item = free.pop() || [-1, -1];\n                item[0] = newX;\n                item[1] = newY;\n                todo.push(item);\n            }\n        }\n    }\n\n    return Math.min(count, 10000);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n\nexport function updateLoopiness(map: LoopSite) {\n    resetLoopiness(map);\n    checkLoopiness(map);\n    cleanLoopiness(map);\n}\n\nexport function resetLoopiness(map: LoopSite) {\n    GWU.xy.forRect(map.width, map.height, (x, y) => {\n        if (\n            (map.blocksPathing(x, y) || map.blocksMove(x, y)) &&\n            !map.isSecretDoor(x, y)\n        ) {\n            map.clearInLoop(x, y);\n            // cell.flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = false;\n        } else {\n            map.setInLoop(x, y);\n            // cell.flags.cell |= Flags.Cell.IS_IN_LOOP;\n            // passMap[i][j] = true;\n        }\n    });\n}\n\nexport function checkLoopiness(map: LoopSite) {\n    let inString;\n    let newX, newY, dir, sdir;\n    let numStrings, maxStringLength, currentStringLength;\n\n    const todo = GWU.grid.alloc(map.width, map.height, 1);\n    let tryAgain = true;\n\n    while (tryAgain) {\n        tryAgain = false;\n        todo.forEach((v, x, y) => {\n            if (!v) return;\n            // const cell = map.cell(x, y);\n\n            todo[x][y] = 0;\n\n            if (!map.isInLoop(x, y)) {\n                return;\n            }\n\n            // find an unloopy neighbor to start on\n            for (sdir = 0; sdir < 8; sdir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[sdir][0];\n                newY = y + GWU.xy.CLOCK_DIRS[sdir][1];\n\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const cell = map.cell(newX, newY);\n                if (!map.isInLoop(newX, newY)) {\n                    break;\n                }\n            }\n            if (sdir == 8) {\n                // no unloopy neighbors\n                return; // leave cell loopy\n            }\n\n            // starting on this unloopy neighbor,\n            // work clockwise and count up:\n            // (a) the number of strings of loopy neighbors, and\n            // (b) the length of the longest such string.\n            numStrings = maxStringLength = currentStringLength = 0;\n            inString = false;\n            for (dir = sdir; dir < sdir + 8; dir++) {\n                newX = x + GWU.xy.CLOCK_DIRS[dir % 8][0];\n                newY = y + GWU.xy.CLOCK_DIRS[dir % 8][1];\n                if (!map.hasXY(newX, newY)) continue;\n\n                // const newCell = map.cell(newX, newY);\n                if (map.isInLoop(newX, newY)) {\n                    currentStringLength++;\n                    if (!inString) {\n                        numStrings++;\n                        inString = true;\n                        if (numStrings > 1) {\n                            break; // more than one string here; leave loopy\n                        }\n                    }\n                } else if (inString) {\n                    if (currentStringLength > maxStringLength) {\n                        maxStringLength = currentStringLength;\n                    }\n                    currentStringLength = 0;\n                    inString = false;\n                }\n            }\n\n            if (inString && currentStringLength > maxStringLength) {\n                maxStringLength = currentStringLength;\n            }\n            if (numStrings == 1 && maxStringLength <= 4) {\n                map.clearInLoop(x, y);\n                // cell.clearCellFlag(Flags.Cell.IS_IN_LOOP);\n                // console.log(x, y, numStrings, maxStringLength);\n                // map.dump((c) =>\n                //     c.hasCellFlag(Flags.Cell.IS_IN_LOOP) ? '*' : ' '\n                // );\n\n                for (dir = 0; dir < 8; dir++) {\n                    newX = x + GWU.xy.CLOCK_DIRS[dir][0];\n                    newY = y + GWU.xy.CLOCK_DIRS[dir][1];\n                    if (map.hasXY(newX, newY) && map.isInLoop(newX, newY)) {\n                        todo[newX][newY] = 1;\n                        tryAgain = true;\n                    }\n                }\n            }\n        });\n    }\n}\n\nexport function fillInnerLoopGrid(map: LoopSite, grid: GWU.grid.NumGrid) {\n    for (let x = 0; x < map.width; ++x) {\n        for (let y = 0; y < map.height; ++y) {\n            // const cell = map.cell(x, y);\n            if (map.isInLoop(x, y)) {\n                grid[x][y] = 1;\n            } else if (x > 0 && y > 0) {\n                // const up = map.cell(x, y - 1);\n                // const left = map.cell(x - 1, y);\n                if (\n                    map.isInLoop(x, y - 1) &&\n                    map.isInLoop(x - 1, y)\n                    // up.flags.cell & Flags.Cell.IS_IN_LOOP &&\n                    // left.flags.cell & Flags.Cell.IS_IN_LOOP\n                ) {\n                    grid[x][y] = 1;\n                }\n            }\n        }\n    }\n}\n\nexport function cleanLoopiness(map: LoopSite) {\n    // remove extraneous loop markings\n    const grid = GWU.grid.alloc(map.width, map.height);\n    fillInnerLoopGrid(map, grid);\n\n    // const xy = { x: 0, y: 0 };\n    let designationSurvives;\n\n    for (let i = 0; i < grid.width; i++) {\n        for (let j = 0; j < grid.height; j++) {\n            // const cell = map.cell(i, j);\n            if (map.isInLoop(i, j)) {\n                designationSurvives = false;\n                for (let dir = 0; dir < 8; dir++) {\n                    let newX = i + GWU.xy.CLOCK_DIRS[dir][0];\n                    let newY = j + GWU.xy.CLOCK_DIRS[dir][1];\n\n                    if (\n                        map.hasXY(newX, newY) && // RUT.Map.makeValidXy(map, xy, newX, newY) &&\n                        !grid[newX][newY] &&\n                        !map.isInLoop(newX, newY)\n                    ) {\n                        designationSurvives = true;\n                        break;\n                    }\n                }\n                if (!designationSurvives) {\n                    grid[i][j] = 1;\n                    map.clearInLoop(i, j);\n                    // map.cell(i, j).flags.cell &= ~Flags.Cell.IS_IN_LOOP;\n                }\n            }\n        }\n    }\n    GWU.grid.free(grid);\n}\n\n////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////\n","import * as GWU from 'gw-utils';\nimport * as Utils from './utils';\n\nimport * as TILE from './tile';\nimport * as ITEM from './item';\nimport * as HORDE from './horde';\nimport * as ANALYZE from './analyze';\n\nexport interface SetTileOptions {\n    superpriority?: boolean;\n    blockedByOtherLayers?: boolean;\n    blockedByActors?: boolean;\n    blockedByItems?: boolean;\n    volume?: number;\n    machine?: number;\n}\n\nexport const Flags = GWU.flag.make([\n    'CHOKEPOINT',\n    'GATE_SITE',\n    'IN_LOOP',\n    'IN_MACHINE',\n    'IN_AREA_MACHINE',\n    'IMPREGNABLE',\n]);\n\nexport interface SiteOptions {\n    rng?: GWU.rng.Random;\n}\n\nexport class Site implements ANALYZE.AnalysisSite {\n    _tiles: GWU.grid.NumGrid;\n    _doors: GWU.grid.NumGrid;\n    _flags: GWU.grid.NumGrid;\n    _machine: GWU.grid.NumGrid;\n    _chokeCounts: GWU.grid.NumGrid;\n\n    rng: GWU.rng.Random = GWU.rng.random;\n\n    items: ITEM.ItemInstance[] = [];\n    actors: HORDE.ActorInstance[] = [];\n\n    depth: number;\n    machineCount: number;\n\n    constructor(width: number, height: number, opts: SiteOptions = {}) {\n        this.depth = 0;\n        this.machineCount = 0;\n\n        this._tiles = GWU.grid.alloc(width, height);\n        this._doors = GWU.grid.alloc(width, height);\n        this._flags = GWU.grid.alloc(width, height);\n        this._machine = GWU.grid.alloc(width, height);\n        this._chokeCounts = GWU.grid.alloc(width, height);\n\n        if (opts.rng) {\n            this.rng = opts.rng;\n        }\n    }\n\n    free() {\n        GWU.grid.free(this._tiles);\n        GWU.grid.free(this._doors);\n        GWU.grid.free(this._flags);\n        GWU.grid.free(this._machine);\n        GWU.grid.free(this._chokeCounts);\n    }\n    clear() {\n        this._tiles.fill(0);\n        this._doors.fill(0);\n        this._flags.fill(0);\n        this._machine.fill(0);\n        this._chokeCounts.fill(0);\n        // this.depth = 0;\n        this.machineCount = 0;\n    }\n    dump(fmt?: GWU.grid.GridFormat<number>) {\n        if (fmt) {\n            return this._tiles.dump(fmt);\n        }\n\n        this._tiles.dump((c) => TILE.getTile(c).ch || '?');\n    }\n    // drawInto(buffer: GWU.canvas.Buffer): void {\n    //     buffer.blackOut();\n    //     this.tiles.forEach((t, x, y) => {\n    //         const tile = GWM.tile.get(t);\n    //         buffer.drawSprite(x, y, tile.sprite);\n    //     });\n    // }\n\n    copy(other: Site) {\n        this.depth = other.depth;\n        this.machineCount = other.machineCount;\n\n        this._tiles.copy(other._tiles);\n        this._doors.copy(other._doors);\n        this._machine.copy(other._machine);\n        this._flags.copy(other._flags);\n        this._chokeCounts.copy(other._chokeCounts);\n\n        this.rng = other.rng;\n\n        this.items = other.items.slice();\n        this.actors = other.actors.slice();\n    }\n\n    copyTiles(other: Site, offsetX = 0, offsetY = 0) {\n        GWU.xy.forRect(this.width, this.height, (x, y) => {\n            const otherX = x - offsetX;\n            const otherY = y - offsetY;\n\n            const v = other._tiles.get(otherX, otherY);\n            if (!v) return;\n            this._tiles[x][y] = v;\n        });\n    }\n\n    setSeed(seed: number) {\n        this.rng.seed(seed);\n    }\n\n    get width() {\n        return this._tiles.width;\n    }\n    get height() {\n        return this._tiles.height;\n    }\n\n    hasXY(x: number, y: number) {\n        return this._tiles.hasXY(x, y);\n    }\n    isBoundaryXY(x: number, y: number) {\n        return this._tiles.isBoundaryXY(x, y);\n    }\n\n    isPassable(x: number, y: number) {\n        return (\n            this.isFloor(x, y) ||\n            this.isDoor(x, y) ||\n            this.isBridge(x, y) ||\n            this.isStairs(x, y) ||\n            this.isShallow(x, y)\n        );\n    }\n\n    isNothing(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING');\n    }\n\n    isDiggable(x: number, y: number) {\n        return this.hasTile(x, y, 'NOTHING') || this.hasTile(x, y, 'WALL');\n    }\n\n    isProtected(_x: number, _y: number): boolean {\n        return false;\n    }\n\n    isFloor(x: number, y: number) {\n        return this.hasTile(x, y, 'FLOOR');\n    }\n\n    isDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'DOOR');\n    }\n\n    isSecretDoor(x: number, y: number) {\n        return this.hasTile(x, y, 'SECRET_DOOR');\n    }\n\n    isBridge(x: number, y: number) {\n        return this.hasTile(x, y, 'BRIDGE');\n    }\n\n    isWall(x: number, y: number): boolean {\n        return this.blocksMove(x, y) && this.blocksVision(x, y);\n    }\n\n    blocksMove(x: number, y: number): boolean {\n        return TILE.getTile(this._tiles[x][y]).blocksMove || false;\n    }\n\n    blocksDiagonal(x: number, y: number) {\n        return this.isNothing(x, y) || this.isWall(x, y);\n    }\n\n    blocksPathing(x: number, y: number) {\n        return (\n            this.isNothing(x, y) ||\n            this.isWall(x, y) ||\n            this.isDeep(x, y) ||\n            this.isStairs(x, y)\n        );\n    }\n\n    blocksVision(x: number, y: number) {\n        return TILE.getTile(this._tiles[x][y]).blocksVision || false;\n    }\n\n    blocksItems(x: number, y: number) {\n        return (\n            this.blocksPathing(x, y) ||\n            this.isChokepoint(x, y) ||\n            this.isInLoop(x, y) ||\n            this.isInMachine(x, y)\n        );\n        // site.hasCellFlag(\n        //     x,\n        //     y,\n        //     GWM.flags.Cell.IS_CHOKEPOINT |\n        //         GWM.flags.Cell.IS_IN_LOOP |\n        //         GWM.flags.Cell.IS_IN_MACHINE\n        // );\n    }\n\n    blocksEffects(x: number, y: number) {\n        return this.isWall(x, y);\n    }\n\n    isStairs(x: number, y: number) {\n        return (\n            this.hasTile(x, y, 'UP_STAIRS') || this.hasTile(x, y, 'DOWN_STAIRS')\n        );\n    }\n\n    isDeep(x: number, y: number) {\n        return this.hasTile(x, y, 'DEEP');\n    }\n\n    isShallow(x: number, y: number) {\n        return this.hasTile(x, y, 'SHALLOW');\n    }\n\n    isAnyLiquid(x: number, y: number) {\n        return this.isDeep(x, y) || this.isShallow(x, y);\n    }\n\n    isSet(x: number, y: number) {\n        return (this._tiles.get(x, y) || 0) > 0;\n    }\n\n    tileBlocksMove(tile: string): boolean {\n        return TILE.getTile(tile).blocksMove || false;\n    }\n\n    setTile(\n        x: number,\n        y: number,\n        tile: string | number,\n        _opts: SetTileOptions = {}\n    ) {\n        // if (tile instanceof GWM.tile.Tile) {\n        //     tile = tile.index;\n        // }\n        if (!this._tiles.hasXY(x, y)) return false;\n\n        if (typeof tile === 'string') {\n            tile = TILE.tileId(tile);\n        }\n\n        // priority checks...\n\n        this._tiles[x][y] = tile;\n        return true;\n    }\n    clearTile(x: number, y: number) {\n        if (this.hasXY(x, y)) {\n            this._tiles[x][y] = 0;\n        }\n    }\n    getTile(x: number, y: number): TILE.TileInfo {\n        const id = this._tiles[x][y];\n        return TILE.getTile(id);\n    }\n\n    makeImpregnable(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IMPREGNABLE;\n        // site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n    }\n\n    isImpregnable(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IMPREGNABLE);\n    }\n\n    hasTile(x: number, y: number, tile: string | number): boolean {\n        if (typeof tile === 'string') {\n            tile = TILE.tileId(tile);\n        }\n        return this.hasXY(x, y) && this._tiles[x][y] == tile;\n    }\n\n    getChokeCount(x: number, y: number): number {\n        return this._chokeCounts[x][y];\n    }\n    setChokeCount(x: number, y: number, count: number): void {\n        this._chokeCounts[x][y] = count;\n    }\n\n    getFlags(x: number, y: number): number {\n        return this._flags[x][y];\n    }\n\n    setChokepoint(x: number, y: number): void {\n        this._flags[x][y] |= Flags.CHOKEPOINT;\n    }\n    isChokepoint(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.CHOKEPOINT);\n    }\n    clearChokepoint(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.CHOKEPOINT;\n    }\n\n    setGateSite(x: number, y: number): void {\n        this._flags[x][y] |= Flags.GATE_SITE;\n    }\n    isGateSite(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.GATE_SITE);\n    }\n\n    clearGateSite(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.GATE_SITE;\n    }\n\n    setInLoop(x: number, y: number): void {\n        this._flags[x][y] |= Flags.IN_LOOP;\n    }\n    isInLoop(x: number, y: number): boolean {\n        return !!(this._flags[x][y] & Flags.IN_LOOP);\n    }\n    clearInLoop(x: number, y: number): void {\n        this._flags[x][y] &= ~Flags.IN_LOOP;\n    }\n\n    analyze(updateChokeCounts = true): void {\n        ANALYZE.analyze(this, updateChokeCounts);\n    }\n\n    snapshot(): Site {\n        const other = new Site(this.width, this.height);\n        other.copy(this);\n        return other;\n    }\n    restore(snapshot: Site) {\n        this.copy(snapshot);\n    }\n\n    nextMachineId(): number {\n        this.machineCount += 1;\n        return this.machineCount;\n    }\n    setMachine(x: number, y: number, id: number, isRoom?: boolean): void {\n        this._machine[x][y] = id;\n        const flag = isRoom ? Flags.IN_MACHINE : Flags.IN_AREA_MACHINE;\n        this._flags[x][y] |= flag;\n    }\n    isAreaMachine(x: number, y: number): boolean {\n        return !!(this._machine[x][y] & Flags.IN_AREA_MACHINE);\n    }\n    isInMachine(x: number, y: number): boolean {\n        return this._machine[x][y] > 0;\n    }\n    getMachine(x: number, y: number): number {\n        return this._machine[x][y];\n    }\n\n    needsMachine(_x: number, _y: number): boolean {\n        // site.hasCellFlag(\n        //     i,\n        //     j,\n        //     GWM.flags.Cell.IS_WIRED | GWM.flags.Cell.IS_CIRCUIT_BREAKER\n        // );\n        return false;\n    }\n\n    updateDoorDirs(): void {\n        this._doors.update((_v, x, y) => {\n            return Utils.directionOfDoorSite(this, x, y);\n        });\n    }\n    getDoorDir(x: number, y: number): number {\n        return this._doors[x][y];\n    }\n\n    // tileBlocksMove(tile: number): boolean {\n    //     return (\n    //         tile === WALL ||\n    //         tile === DEEP ||\n    //         tile === IMPREGNABLE ||\n    //         tile === DIG.NOTHING\n    //     );\n    // }\n\n    isOccupied(x: number, y: number): boolean {\n        return this.hasActor(x, y) || this.hasItem(x, y);\n    }\n\n    canSpawnActor(x: number, y: number, _actor: HORDE.ActorInstance): boolean {\n        // const cell = map.cell(x, y);\n        // if (actor.avoidsCell(cell)) return false;\n\n        // if (Map.isHallway(map, x, y)) {\n        //     return false;\n        // }\n        return this.isFloor(x, y);\n    }\n\n    eachActor(cb: (a: HORDE.ActorInstance) => void): void {\n        this.actors.forEach(cb);\n    }\n    addActor(x: number, y: number, a: HORDE.ActorInstance): number {\n        a.x = x;\n        a.y = y;\n        this.actors.push(a);\n        return this.actors.length;\n    }\n    getActor(i: number): HORDE.ActorInstance {\n        return this.actors[i];\n    }\n    // removeActor(a: HORDE.ActorInstance): void {\n    //     GWU.arrayDelete(this.actors, a);\n    // }\n    forbidsActor(x: number, y: number, _a: HORDE.ActorInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasActor(x: number, y: number): boolean {\n        return this.actors.some((a) => a.x === x && a.y === y);\n    }\n\n    eachItem(cb: (i: ITEM.ItemInstance) => void): void {\n        this.items.forEach(cb);\n    }\n    addItem(x: number, y: number, i: ITEM.ItemInstance): number {\n        i.x = x;\n        i.y = y;\n        this.items.push(i);\n        return this.items.length;\n    }\n    getItem(i: number): ITEM.ItemInstance {\n        return this.items[i];\n    }\n    // removeItem(i: ITEM.ItemInstance): void {\n    //     GWU.arrayDelete(this.items, i);\n    // }\n    forbidsItem(x: number, y: number, _i: ITEM.ItemInstance): boolean {\n        return !this.isFloor(x, y);\n    }\n    hasItem(x: number, y: number): boolean {\n        return this.items.some((i) => i.x === x && i.y === y);\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { Site } from '../site';\nimport { Room } from '../../types';\nimport { BuildData } from '../../build/data';\nimport { BuildStep } from '../../build/buildStep';\nimport * as ITEM from '../item';\n\nexport interface Logger {\n    onDigFirstRoom(site: Site): void;\n    onRoomCandidate(room: Room, roomSite: Site): void;\n    onRoomFailed(site: Site, room: Room, roomSite: Site, error: string): void;\n    onRoomSuccess(site: Site, room: Room): void;\n\n    onLoopsAdded(site: Site): void;\n    onLakesAdded(site: Site): void;\n    onBridgesAdded(site: Site): void;\n    onStairsAdded(site: Site): void;\n\n    //\n\n    onBuildError(error: string): void;\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number): void;\n\n    onBlueprintCandidates(data: BuildData): void;\n\n    onBlueprintStart(\n        data: BuildData,\n        adoptedItem: ITEM.ItemInstance | null\n    ): void;\n\n    onBlueprintInterior(data: BuildData): void;\n\n    onBlueprintFail(data: BuildData, error: string): void;\n\n    onBlueprintSuccess(data: BuildData): void;\n\n    onStepStart(\n        data: BuildData,\n        step: BuildStep,\n        item: ITEM.ItemInstance | null\n    ): void;\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ): void;\n\n    onStepInstanceSuccess(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number\n    ): void;\n\n    onStepInstanceFail(\n        data: BuildData,\n        step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ): void;\n\n    onStepSuccess(data: BuildData, step: BuildStep): void;\n\n    onStepFail(data: BuildData, step: BuildStep, error: string): void;\n}\n\nexport class NullLogger implements Logger {\n    onDigFirstRoom(): void {}\n    onRoomCandidate(): void {}\n    onRoomFailed(): void {}\n    onRoomSuccess(): void {}\n    onLoopsAdded(): void {}\n    onLakesAdded(): void {}\n    onBridgesAdded(): void {}\n    onStairsAdded(): void {}\n\n    onBuildError(): void {}\n    onBlueprintPick(): void {}\n    onBlueprintCandidates(): void {}\n    onBlueprintStart(): void {}\n    onBlueprintInterior(): void {}\n    onBlueprintFail(): void {}\n    onBlueprintSuccess(): void {}\n    onStepStart(): void {}\n    onStepCandidates(): void {}\n    onStepInstanceSuccess(): void {}\n    onStepInstanceFail(): void {}\n    onStepSuccess(): void {}\n    onStepFail(): void {}\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport { BuildData } from './data';\nimport { Blueprint } from './blueprint';\nimport * as FEATURE from '../feature';\n// import * as ITEM from '../item';\n\nexport interface HordeStepOptions {\n    id?: string;\n    tags?: string;\n    feature?: FEATURE.FeatureConfig;\n    make?: Record<string, any>;\n}\n\nexport interface ItemStepOptions {\n    id?: string;\n    tags?: string;\n    make?: Record<string, any>;\n    feature?: FEATURE.FeatureConfig;\n}\n\nexport interface StepOptions {\n    tile: string;\n    flags: GWU.flag.FlagBase;\n    pad: number;\n    count: GWU.range.RangeBase;\n    item: string | ItemStepOptions;\n    horde: string | boolean | HordeStepOptions;\n    feature: FEATURE.FeatureConfig;\n}\n\nexport interface HordeStepInfo extends HordeStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nexport interface ItemStepInfo extends ItemStepOptions {\n    tags: string;\n    feature?: FEATURE.FeatureFn;\n}\n\nconst Fl = GWU.flag.fl;\n\nexport enum StepFlags {\n    BS_OUTSOURCE_ITEM_TO_MACHINE = Fl(1), // item must be adopted by another machine\n    BS_BUILD_VESTIBULE = Fl(2), // call this at the origin of a door room to create a new door guard machine there\n    BS_ADOPT_ITEM = Fl(3), // this feature will take the adopted item (be it from another machine or a previous feature)\n    BS_BUILD_AT_ORIGIN = Fl(4), // generate this feature at the room entrance\n\n    BS_PERMIT_BLOCKING = Fl(5), // permit the feature to block the map's passability (e.g. to add a locked door)\n    BS_TREAT_AS_BLOCKING = Fl(6), // treat this terrain as though it blocks, for purposes of deciding whether it can be placed there\n\n    BS_NEAR_ORIGIN = Fl(7), // feature must spawn in the rough quarter of tiles closest to the origin\n    BS_FAR_FROM_ORIGIN = Fl(8), // feature must spawn in the rough quarter of tiles farthest from the origin\n    BS_IN_VIEW_OF_ORIGIN = Fl(9), // this feature must be in view of the origin\n    BS_IN_PASSABLE_VIEW_OF_ORIGIN = Fl(10), // this feature must be in view of the origin, where \"view\" is blocked by pathing blockers\n\n    BS_HORDE_TAKES_ITEM = Fl(11), // the item associated with this feature (including if adopted) will be in possession of the horde leader that's generated\n    BS_HORDE_SLEEPING = Fl(12), // the monsters should be asleep when generated\n    BS_HORDE_FLEEING = Fl(13), // the monsters should be permanently fleeing when generated\n    BS_HORDES_DORMANT = Fl(14), // monsters are dormant, and appear when a dungeon feature with DFF_ACTIVATE_DORMANT_MONSTER spawns on their tile\n\n    BS_ITEM_IS_KEY = Fl(15),\n    BS_ITEM_IDENTIFIED = Fl(16),\n    BS_ITEM_PLAYER_AVOIDS = Fl(17),\n\n    BS_EVERYWHERE = Fl(18), // generate the feature on every tile of the machine (e.g. carpeting)\n    BS_ALTERNATIVE = Fl(19), // build only one feature that has this flag per machine; the rest are skipped\n    BS_ALTERNATIVE_2 = Fl(20), // same as BS_ALTERNATIVE, but provides for a second set of alternatives of which only one will be chosen\n\n    BS_BUILD_IN_WALLS = Fl(21), // build in an impassable tile that is adjacent to the interior\n    BS_BUILD_ANYWHERE_ON_LEVEL = Fl(22), // build anywhere on the level that is not inside the machine\n    BS_REPEAT_UNTIL_NO_PROGRESS = Fl(23), // keep trying to build this feature set until no changes are made\n    BS_IMPREGNABLE = Fl(24), // this feature's location will be immune to tunneling\n\n    BS_NO_BLOCK_ORIGIN = Fl(25), // Treat as blocking, but do not block the path to the origin\n\n    // TODO - BS_ALLOW_IN_HALLWAY instead?\n    BS_NOT_IN_HALLWAY = Fl(27), // the feature location must have a passableArcCount of <= 1\n\n    BS_ALLOW_BOUNDARY = Fl(28), // allow build it in the outermost walls of the level\n\n    BS_SKELETON_KEY = Fl(29), // if a key is generated or adopted by this feature, it will open all locks in this machine.\n    BS_KEY_DISPOSABLE = Fl(30), // if a key is generated or adopted, it will self-destruct after being used at this current location.\n}\n\nexport class BuildStep {\n    tile: string | null = null;\n    flags: number = 0;\n    pad: number = 0;\n    count: GWU.range.Range;\n    item: ItemStepInfo | null = null;\n    horde: HordeStepInfo | null = null;\n    feature: FEATURE.FeatureFn | null = null;\n    chance = 0;\n    index = -1;\n    // next: null = null;\n    // id = 'n/a';\n\n    constructor(cfg: Partial<StepOptions> = {}) {\n        this.tile = cfg.tile || null;\n        if (cfg.flags) {\n            this.flags = GWU.flag.from(StepFlags, cfg.flags);\n        }\n        if (cfg.pad) {\n            this.pad = cfg.pad;\n        }\n        this.count = GWU.range.make(cfg.count || 1);\n        if (typeof cfg.item === 'string') {\n            this.item = { tags: cfg.item };\n        } else if (cfg.item) {\n            // @ts-ignore\n            this.item = Object.assign({ tags: '' }, cfg.item);\n            if (this.item!.feature) {\n                this.item!.feature = FEATURE.make(this.item!.feature);\n            }\n        } else {\n            this.item = null;\n        }\n        if (cfg.horde) {\n            if (cfg.horde === true) {\n                this.horde = { tags: '' };\n            } else if (typeof cfg.horde === 'string') {\n                this.horde = { tags: cfg.horde };\n            } else {\n                // @ts-ignore\n                this.horde = Object.assign({ tags: '' }, cfg.horde);\n                if (this.horde!.feature) {\n                    this.horde!.feature = FEATURE.make(this.horde!.feature);\n                }\n            }\n        } else {\n            this.horde = null;\n        }\n\n        if (cfg.feature) {\n            this.feature = FEATURE.make(cfg.feature);\n        } else {\n            this.feature = null;\n        }\n\n        if (this.item && this.flags & StepFlags.BS_ADOPT_ITEM) {\n            throw new Error(\n                'Cannot have blueprint step with item and BS_ADOPT_ITEM.'\n            );\n        }\n\n        if (this.buildAtOrigin && this.count.hi > 1) {\n            throw new Error(\n                'Cannot have count > 1 for step with BS_BUILD_AT_ORIGIN.'\n            );\n        }\n        if (this.buildAtOrigin && this.repeatUntilNoProgress) {\n            throw new Error(\n                'Cannot have BS_BUILD_AT_ORIGIN and BS_REPEAT_UNTIL_NO_PROGRESS together in a build step.'\n            );\n        }\n        if (this.hordeTakesItem && !this.horde) {\n            throw new Error(\n                'Cannot have BS_HORDE_TAKES_ITEM without a horde configured.'\n            );\n        }\n    }\n\n    get allowBoundary(): boolean {\n        return !!(this.flags & StepFlags.BS_ALLOW_BOUNDARY);\n    }\n\n    get notInHallway(): boolean {\n        return !!(this.flags & StepFlags.BS_NOT_IN_HALLWAY);\n    }\n\n    get buildInWalls(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_IN_WALLS);\n    }\n\n    get buildAnywhere(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_ANYWHERE_ON_LEVEL);\n    }\n\n    get repeatUntilNoProgress(): boolean {\n        return !!(this.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS);\n    }\n\n    get permitBlocking(): boolean {\n        return !!(this.flags & StepFlags.BS_PERMIT_BLOCKING);\n    }\n\n    get treatAsBlocking(): boolean {\n        return !!(\n            this.flags &\n            (StepFlags.BS_TREAT_AS_BLOCKING | StepFlags.BS_NO_BLOCK_ORIGIN)\n        );\n    }\n\n    get noBlockOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_NO_BLOCK_ORIGIN);\n    }\n\n    get adoptItem(): boolean {\n        return !!(this.flags & StepFlags.BS_ADOPT_ITEM);\n    }\n\n    get itemIsKey(): boolean {\n        return !!(this.flags & StepFlags.BS_ITEM_IS_KEY);\n    }\n\n    get keyIsDisposable(): boolean {\n        return !!(this.flags & StepFlags.BS_KEY_DISPOSABLE);\n    }\n\n    get outsourceItem(): boolean {\n        return !!(this.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE);\n    }\n\n    get impregnable(): boolean {\n        return !!(this.flags & StepFlags.BS_IMPREGNABLE);\n    }\n\n    get buildVestibule(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_VESTIBULE);\n    }\n\n    get hordeTakesItem(): boolean {\n        return !!(this.flags & StepFlags.BS_HORDE_TAKES_ITEM);\n    }\n\n    get generateEverywhere(): boolean {\n        return !!(\n            this.flags &\n            StepFlags.BS_EVERYWHERE &\n            ~StepFlags.BS_BUILD_AT_ORIGIN\n        );\n    }\n\n    get buildAtOrigin(): boolean {\n        return !!(this.flags & StepFlags.BS_BUILD_AT_ORIGIN);\n    }\n\n    get buildsInstances(): boolean {\n        return !!(\n            this.feature ||\n            this.tile ||\n            this.item ||\n            this.horde ||\n            this.adoptItem\n        );\n    }\n\n    // makeItem(data: BuildData): ITEM.ItemInfo | null {\n    //     if (!this.item) return null;\n    //     return ITEM.pick(data.depth, this.item);\n    // }\n\n    // cellIsCandidate(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     x: number,\n    //     y: number,\n    //     distanceBound: [number, number]\n    // ) {\n    //     return cellIsCandidate(builder, blueprint, this, x, y, distanceBound);\n    // }\n\n    // distanceBound(builder: BuildData): [number, number] {\n    //     return calcDistanceBound(builder, this);\n    // }\n\n    // updateViewMap(builder: BuildData): void {\n    //     updateViewMap(builder, this);\n    // }\n\n    // build(\n    //     builder: BuildData,\n    //     blueprint: Blueprint,\n    //     adoptedItem: GWM.item.Item | null\n    // ): boolean {\n    //     return buildStep(builder, blueprint, this, adoptedItem);\n    // }\n\n    markCandidates(\n        data: BuildData,\n        candidates: GWU.grid.NumGrid,\n        distanceBound: [number, number] = [0, 10000]\n    ): number {\n        updateViewMap(data, this);\n        const blueprint = data.blueprint;\n        let count = 0;\n        candidates.update((_v, i, j) => {\n            const candidateType = cellIsCandidate(\n                data,\n                blueprint,\n                this,\n                i,\n                j,\n                distanceBound\n            );\n            if (candidateType === CandidateType.OK) {\n                count++;\n            }\n            return candidateType;\n        });\n        return count;\n    }\n\n    makePersonalSpace(\n        _data: BuildData,\n        x: number,\n        y: number,\n        candidates: GWU.grid.NumGrid\n    ) {\n        let count = 0;\n\n        if (this.pad < 1) return 0; // do not mark occupied\n        // or...\n        // if (this.buildEverywhere) return 0;  // do not mark occupied\n\n        for (let i = x - this.pad; i <= x + this.pad; i++) {\n            for (let j = y - this.pad; j <= y + this.pad; j++) {\n                if (candidates.hasXY(i, j)) {\n                    if (candidates[i][j] == 1) {\n                        candidates[i][j] = 0;\n                        ++count;\n                    }\n                    // builder.occupied[i][j] = 1;\n                }\n            }\n        }\n        return count;\n    }\n\n    toString() {\n        let parts = [];\n        if (this.tile) {\n            parts.push('tile: ' + this.tile);\n        }\n        if (this.feature) {\n            parts.push('effect: ' + JSON.stringify(this.feature));\n        }\n        if (this.item) {\n            parts.push('item: ' + JSON.stringify(this.item));\n        }\n        if (this.horde) {\n            parts.push('horde: ' + JSON.stringify(this.horde));\n        }\n        if (this.pad > 1) {\n            parts.push('pad: ' + this.pad);\n        }\n        if (this.count.lo > 1 || this.count.hi > 1) {\n            parts.push('count: ' + this.count.toString());\n        }\n        if (this.chance) {\n            parts.push('chance: ' + this.chance);\n        }\n        if (this.flags) {\n            parts.push('flags: ' + GWU.flag.toString(StepFlags, this.flags));\n        }\n        return '{ ' + parts.join(', ') + ' }';\n    }\n}\n\nexport function updateViewMap(builder: BuildData, buildStep: BuildStep): void {\n    if (\n        buildStep.flags &\n        (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n            StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN)\n    ) {\n        const site = builder.site;\n        if (buildStep.flags & StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksPathing(x, y) || site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        } else {\n            const fov = new GWU.fov.FOV({\n                isBlocked: (x, y) => {\n                    return site.blocksVision(x, y);\n                },\n                hasXY: (x, y) => {\n                    return site.hasXY(x, y);\n                },\n            });\n            fov.calculate(builder.originX, builder.originY, 50, (x, y) => {\n                builder.viewMap[x][y] = 1;\n            });\n        }\n        builder.viewMap[builder.originX][builder.originY] = 1;\n    }\n}\n\nexport function calcDistanceBound(\n    builder: BuildData,\n    buildStep: BuildStep\n): [number, number] {\n    const distanceBound: [number, number] = [0, 10000];\n    if (buildStep.flags & StepFlags.BS_NEAR_ORIGIN) {\n        distanceBound[1] = builder.distance25;\n    }\n    if (buildStep.flags & StepFlags.BS_FAR_FROM_ORIGIN) {\n        distanceBound[0] = builder.distance75;\n    }\n    return distanceBound;\n}\n\nexport enum CandidateType {\n    NOT_CANDIDATE = 0,\n    OK = 1,\n    IN_HALLWAY,\n    ON_BOUNDARY,\n    MUST_BE_ORIGIN,\n    NOT_ORIGIN,\n    OCCUPIED,\n    NOT_IN_VIEW,\n    TOO_FAR,\n    TOO_CLOSE,\n    INVALID_WALL,\n    BLOCKED,\n    FAILED,\n}\n\nexport function cellIsCandidate(\n    builder: BuildData,\n    blueprint: Blueprint,\n    buildStep: BuildStep,\n    x: number,\n    y: number,\n    distanceBound: [number, number]\n): CandidateType {\n    const site = builder.site;\n\n    // No building in the hallway if it's prohibited.\n    // This check comes before the origin check, so an area machine will fail altogether\n    // if its origin is in a hallway and the feature that must be built there does not permit as much.\n    if (\n        buildStep.notInHallway &&\n        GWU.xy.arcCount(\n            x,\n            y,\n            (i, j) => site.hasXY(i, j) && site.isPassable(i, j)\n        ) > 1\n    ) {\n        return CandidateType.IN_HALLWAY;\n    }\n\n    // if (buildStep.noBlockOrigin) {\n    //     let ok = true;\n    //     GWU.xy.eachNeighbor(\n    //         x,\n    //         y,\n    //         (nx, ny) => {\n    //             if (nx === builder.originX && ny === builder.originY) {\n    //                 ok = false;\n    //             }\n    //         },\n    //         true\n    //     );\n    //     if (!ok) return false;\n    // }\n\n    // No building along the perimeter of the level if it's prohibited.\n    if (\n        (x == 0 || x == site.width - 1 || y == 0 || y == site.height - 1) &&\n        !buildStep.allowBoundary\n    ) {\n        return CandidateType.ON_BOUNDARY;\n    }\n\n    // The origin is a candidate if the feature is flagged to be built at the origin.\n    // If it's a room, the origin (i.e. doorway) is otherwise NOT a candidate.\n    if (buildStep.buildAtOrigin) {\n        if (x == builder.originX && y == builder.originY)\n            return CandidateType.OK;\n        return CandidateType.MUST_BE_ORIGIN;\n    } else if (\n        blueprint.isRoom &&\n        x == builder.originX &&\n        y == builder.originY\n    ) {\n        return CandidateType.NOT_ORIGIN;\n    }\n\n    // No building in another feature's personal space!\n    if (builder.occupied[x][y]) {\n        return CandidateType.OCCUPIED;\n    }\n\n    // Must be in the viewmap if the appropriate flag is set.\n    if (\n        buildStep.flags &\n            (StepFlags.BS_IN_VIEW_OF_ORIGIN |\n                StepFlags.BS_IN_PASSABLE_VIEW_OF_ORIGIN) &&\n        !builder.viewMap[x][y]\n    ) {\n        return CandidateType.NOT_IN_VIEW;\n    }\n\n    // Do a distance check if the feature requests it.\n    let distance = 10000;\n    if (site.isWall(x, y)) {\n        // Distance is calculated for walls too.\n        GWU.xy.eachNeighbor(\n            x,\n            y,\n            (i, j) => {\n                if (!builder.distanceMap.hasXY(i, j)) return;\n                if (\n                    !site.blocksPathing(i, j) &&\n                    distance > builder.distanceMap.getDistance(i, j) + 1\n                ) {\n                    distance = builder.distanceMap.getDistance(i, j) + 1;\n                }\n            },\n            true\n        );\n    } else {\n        distance = builder.distanceMap.getDistance(x, y);\n    }\n\n    if (distance > distanceBound[1]) return CandidateType.TOO_FAR; // distance exceeds max\n    if (distance < distanceBound[0]) return CandidateType.TOO_CLOSE;\n\n    if (buildStep.buildInWalls) {\n        // If we're supposed to build in a wall...\n        const cellMachine = site.getMachine(x, y);\n        if (\n            !builder.interior[x][y] &&\n            (!cellMachine || cellMachine == builder.machineNumber) &&\n            site.isWall(x, y)\n        ) {\n            let ok = false;\n            let failed = false;\n            // ...and this location is a wall that's not already machined...\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (newX, newY) => {\n                    if (failed) return;\n                    if (!site.hasXY(newX, newY)) return;\n                    if (\n                        !builder.interior[newX][newY] &&\n                        !buildStep.buildAnywhere\n                    ) {\n                        return;\n                    }\n                    // ...and it's next to an interior spot or permitted elsewhere and next to passable spot...\n                    const neighborMachine = site.getMachine(newX, newY);\n                    if (\n                        !site.blocksPathing(newX, newY) &&\n                        (!neighborMachine ||\n                            neighborMachine == builder.machineNumber) &&\n                        !(newX == builder.originX && newY == builder.originY)\n                    ) {\n                        if (\n                            buildStep.notInHallway &&\n                            GWU.xy.arcCount(\n                                newX,\n                                newY,\n                                (i, j) =>\n                                    site.hasXY(i, j) && site.isPassable(i, j)\n                            ) > 1\n                        ) {\n                            // return CandidateType.IN_HALLWAY;\n                            failed = true;\n                            ok = false;\n                        } else {\n                            ok = true;\n                        }\n                    }\n                },\n                true\n            );\n            return ok ? CandidateType.OK : CandidateType.INVALID_WALL;\n        }\n        return CandidateType.NOT_CANDIDATE;\n    } else if (site.isWall(x, y)) {\n        // Can't build in a wall unless instructed to do so.\n        return CandidateType.INVALID_WALL;\n    } else if (buildStep.buildAnywhere) {\n        if (buildStep.item && site.blocksItems(x, y)) {\n            return CandidateType.BLOCKED;\n        } else {\n            return CandidateType.OK;\n        }\n    } else if (builder.interior[x][y]) {\n        return CandidateType.OK;\n    }\n    return CandidateType.FAILED;\n}\n\n// export function buildStep(\n//     builder: BuildData,\n//     blueprint: Blueprint,\n//     buildStep: BuildStep,\n//     adoptedItem: GWM.item.Item | null\n// ): boolean {\n//     let wantCount = 0;\n//     let builtCount = 0;\n\n//     const site = builder.site;\n\n//     const candidates = GWU.grid.alloc(site.width, site.height);\n\n//     // Figure out the distance bounds.\n//     const distanceBound = calcDistanceBound(builder, buildStep);\n//     buildStep.updateViewMap(builder);\n\n//     // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n//     // Make a master map of candidate locations for this feature.\n//     let qualifyingTileCount = markCandidates(\n//         candidates,\n//         builder,\n//         blueprint,\n//         buildStep,\n//         distanceBound\n//     );\n\n//     if (!buildStep.generateEverywhere) {\n//         wantCount = buildStep.count.value();\n//     }\n\n//     if (!qualifyingTileCount || qualifyingTileCount < buildStep.count.lo) {\n//         console.log(\n//             ' - Only %s qualifying tiles - want at least %s.',\n//             qualifyingTileCount,\n//             buildStep.count.lo\n//         );\n//         GWU.grid.free(candidates);\n//         return false;\n//     }\n\n//     let x = 0,\n//         y = 0;\n\n//     let success = true;\n//     let didSomething = false;\n\n//     do {\n//         success = true;\n//         // Find a location for the feature.\n//         if (buildStep.buildAtOrigin) {\n//             // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n//             x = builder.originX;\n//             y = builder.originY;\n//         } else {\n//             // Pick our candidate location randomly, and also strike it from\n//             // the candidates map so that subsequent instances of this same feature can't choose it.\n//             [x, y] = site.rng.matchingLoc(\n//                 candidates.width,\n//                 candidates.height,\n//                 (x, y) => candidates[x][y] > 0\n//             );\n//         }\n//         // Don't waste time trying the same place again whether or not this attempt succeeds.\n//         candidates[x][y] = 0;\n//         qualifyingTileCount--;\n\n//         // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n//         if (buildStep.effect) {\n//             success = site.fireEffect(buildStep.effect, x, y);\n//             didSomething = success;\n//         }\n\n//         // Now try to place the terrain tile, if any.\n//         if (success && buildStep.tile !== -1) {\n//             const tile = GWM.tile.get(buildStep.tile);\n//             if (\n//                 !(buildStep.flags & StepFlags.BS_PERMIT_BLOCKING) &&\n//                 (tile.blocksMove() ||\n//                     buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING)\n//             ) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y, {\n//                     machine: site.machineCount,\n//                 });\n//             }\n//             if (success) {\n//                 success = site.setTile(x, y, tile);\n//                 didSomething = didSomething || success;\n//             }\n//         }\n\n//         // Generate an actor, if necessary\n\n//         // Generate an item, if necessary\n//         if (success && buildStep.item) {\n//             const item = site.makeRandomItem(buildStep.item);\n//             if (!item) {\n//                 success = false;\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_ITEM_IS_KEY) {\n//                 item.key = GWM.entity.makeKeyInfo(\n//                     x,\n//                     y,\n//                     !!(buildStep.flags & StepFlags.BS_KEY_DISPOSABLE)\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_OUTSOURCE_ITEM_TO_MACHINE) {\n//                 success = builder.buildRandom(\n//                     Flags.BP_ADOPT_ITEM,\n//                     -1,\n//                     -1,\n//                     item\n//                 );\n//                 if (success) {\n//                     didSomething = true;\n//                 }\n//             } else {\n//                 success = site.addItem(x, y, item);\n//                 didSomething = didSomething || success;\n//             }\n//         } else if (success && buildStep.flags & StepFlags.BS_ADOPT_ITEM) {\n//             // adopt item if necessary\n//             if (!adoptedItem) {\n//                 GWU.grid.free(candidates);\n//                 throw new Error(\n//                     'Failed to build blueprint because there is no adopted item.'\n//                 );\n//             }\n\n//             if (buildStep.flags & StepFlags.BS_TREAT_AS_BLOCKING) {\n//                 // Yes, check for blocking.\n//                 success = !SITE.siteDisruptedByXY(site, x, y);\n//             }\n\n//             if (success) {\n//                 success = site.addItem(x, y, adoptedItem);\n//                 if (success) {\n//                     didSomething = true;\n//                 } else {\n//                     console.log('- failed to add item', x, y);\n//                 }\n//             } else {\n//                 // console.log('- blocks map', x, y);\n//             }\n//         }\n\n//         if (success && didSomething) {\n//             // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n//             qualifyingTileCount -= makePersonalSpace(\n//                 builder,\n//                 x,\n//                 y,\n//                 candidates,\n//                 buildStep.pad\n//             );\n//             builtCount++; // we've placed an instance\n\n//             // Mark the feature location as part of the machine, in case it is not already inside of it.\n//             if (!(blueprint.flags & Flags.BP_NO_INTERIOR_FLAG)) {\n//                 site.setMachine(x, y, builder.machineNumber, blueprint.isRoom);\n//             }\n\n//             // Mark the feature location as impregnable if requested.\n//             if (buildStep.flags & StepFlags.BS_IMPREGNABLE) {\n//                 site.setCellFlag(x, y, GWM.flags.Cell.IMPREGNABLE);\n//             }\n//         }\n\n//         // Finished with this instance!\n//     } while (\n//         qualifyingTileCount > 0 &&\n//         (buildStep.generateEverywhere ||\n//             builtCount < wantCount ||\n//             buildStep.flags & StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS)\n//     );\n\n//     if (success && buildStep.flags & StepFlags.BS_BUILD_VESTIBULE) {\n//         // Generate a door guard machine.\n//         // Try to create a sub-machine that qualifies.\n\n//         success = builder.buildRandom(\n//             Flags.BP_VESTIBULE,\n//             builder.originX,\n//             builder.originY\n//         );\n\n//         if (!success) {\n//             // console.log(\n//             //     `Depth ${builder.depth}: Failed to place blueprint ${blueprint.id} because it requires a vestibule and we couldn't place one.`\n//             // );\n//             // failure! abort!\n//             GWU.grid.free(candidates);\n//             return false;\n//         }\n//         ++builtCount;\n//     }\n\n//     //DEBUG printf(\"\\nFinished feature %i. Here's the candidates map:\", feat);\n//     //DEBUG logBuffer(candidates);\n\n//     success = builtCount > 0;\n\n//     GWU.grid.free(candidates);\n//     return success;\n// }\n","import * as GWU from 'gw-utils';\nimport { Room } from '../../types';\nimport { Site } from '../site';\nimport { Logger } from './logger';\nimport { BuildData } from '../../build/data';\nimport { BuildStep, StepFlags } from '../../build/buildStep';\n\nexport class ConsoleLogger implements Logger {\n    onDigFirstRoom(site: Site) {\n        console.group('dig first room');\n        site.dump();\n        console.groupEnd();\n    }\n\n    onRoomCandidate(room: Room, roomSite: Site): void {\n        console.group('room candidate: ' + room.toString());\n        roomSite.dump();\n        console.groupEnd();\n    }\n\n    onRoomFailed(\n        _site: Site,\n        _room: Room,\n        _roomSite: Site,\n        error: string\n    ): void {\n        console.log('Room Failed - ', error);\n    }\n\n    onRoomSuccess(site: Site, room: Room): void {\n        console.group('Added Room - ' + room.toString());\n        site.dump();\n        console.groupEnd();\n    }\n\n    onLoopsAdded(_site: Site): void {\n        console.log('loops added');\n    }\n    onLakesAdded(_site: Site): void {\n        console.log('lakes added');\n    }\n    onBridgesAdded(_site: Site): void {\n        console.log('bridges added');\n    }\n    onStairsAdded(_site: Site): void {\n        console.log('stairs added');\n    }\n\n    //\n\n    onBuildError(error: string) {\n        console.log(`onBuildError - error: ${error}`);\n    }\n\n    onBlueprintPick(data: BuildData, flags: number, depth: number) {\n        console.log(\n            `onBlueprintPick - ${\n                data.blueprint.id\n            }, depth = ${depth}, matchingFlags = ${GWU.flag.toString(\n                StepFlags,\n                flags\n            )}`\n        );\n    }\n\n    onBlueprintCandidates(data: BuildData) {\n        const label = `onBlueprintCandidates - ${data.blueprint.id}`;\n        console.group(label);\n        data.candidates.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintStart(data: BuildData) {\n        console.group(\n            `onBlueprintStart - ${data.blueprint.id} @ ${data.originX},${\n                data.originY\n            } : stepCount: ${\n                data.blueprint.steps.length\n            }, size: [${data.blueprint.size.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                data.blueprint.flags\n            )}`\n        );\n    }\n\n    onBlueprintInterior(data: BuildData) {\n        console.group(`onBlueprintInterior - ${data.blueprint.id}`);\n        data.interior.dump();\n        console.groupEnd();\n    }\n\n    onBlueprintFail(data: BuildData, error: string) {\n        console.log(\n            `onBlueprintFail - ${data.blueprint.id} @ ${data.originX},${data.originY} : error: ${error}`\n        );\n        console.groupEnd();\n    }\n\n    onBlueprintSuccess(data: BuildData) {\n        console.log(\n            `onBlueprintSuccess - ${data.blueprint.id} @ ${data.originX},${data.originY}`\n        );\n        console.groupEnd();\n    }\n\n    onStepStart(data: BuildData, step: BuildStep) {\n        console.group(\n            `onStepStart - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.log(step.toString());\n    }\n\n    onStepCandidates(\n        data: BuildData,\n        step: BuildStep,\n        candidates: GWU.grid.NumGrid,\n        wantCount: number\n    ) {\n        const haveCount = candidates.count((v) => v == 1);\n        console.log(\n            `onStepCandidates - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : wantCount: ${wantCount}, have: ${haveCount}`\n        );\n        candidates.dump();\n        if (haveCount == 0) {\n            console.log('No candidates - check interior');\n            data.interior.dump();\n        }\n    }\n\n    onStepInstanceSuccess(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number\n    ) {\n        console.log(`onStepInstance @ ${x},${y}`);\n    }\n\n    onStepInstanceFail(\n        _data: BuildData,\n        _step: BuildStep,\n        x: number,\n        y: number,\n        error: string\n    ) {\n        console.log(`onStepInstanceFail @ ${x},${y} - error: ${error}`);\n    }\n\n    onStepSuccess(data: BuildData, step: BuildStep) {\n        console.log(\n            `onStepSuccess - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : count: [${step.count.toString()}], flags: ${GWU.flag.toString(\n                StepFlags,\n                step.flags\n            )}`\n        );\n        console.groupEnd();\n    }\n\n    onStepFail(data: BuildData, step: BuildStep, error: string) {\n        console.log(\n            `onStepFail - ${data.blueprint.id}[${\n                data.blueprint.steps.indexOf(step) + 1\n            }/${data.blueprint.steps.length}] @ ${data.originX},${\n                data.originY\n            } : error : ${error}`\n        );\n        console.groupEnd();\n    }\n}\n","export * from './logger';\nexport * from './consoleLogger';\n// export * from './visualizer';\n","import * as GWU from 'gw-utils';\n\nexport type TileId = string;\n\nexport interface RoomConfig {\n    // fn?: RoomFn;\n    // door?: boolean | number;\n    // doorChance?: number;\n    tile?: TileId;\n    [x: string]: any;\n}\n\n// export type RoomFn = (\n//     config: RoomConfig,\n//     grid: GWU.grid.NumGrid\n// ) => Room | RoomConfig | null;\n\n// export interface RoomData extends RoomConfig {\n//     fn: RoomFn;\n//     id: string;\n// }\n\n// export type HallFn = (\n//     opts: HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: Room\n// ) => Hall | any | null;\n// export interface HallConfig {\n//     fn?: HallFn;\n//     chance?: number;\n//     length?: GWU.range.RangeBase | [GWU.range.RangeBase, GWU.range.RangeBase];\n//     width?: GWU.range.RangeBase;\n//     tile?: number;\n//     [x: string]: any;\n// }\n\n// export interface HallData extends HallConfig {\n//     fn: HallFn;\n//     id: string;\n// }\n\n// export interface DigConfig {\n//     room: string | any;\n//     hall?: string | HallConfig | boolean;\n//     tries?: number;\n//     locs?: GWU.xy.Loc[];\n//     loc?: GWU.xy.Loc;\n//     door?: number | boolean;\n// }\n\nexport type DigFn = (x: number, y: number, tile: number) => any;\n\nexport class Hall extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n    }\n}\n\nexport function makeHall(\n    loc: GWU.xy.Loc,\n    dirIndex: number,\n    hallLength: number,\n    hallWidth = 1\n) {\n    const dir = GWU.xy.DIRS[dirIndex];\n    const x = Math.min(loc[0], loc[0] + dir[0] * (hallLength - 1));\n    const y = Math.min(loc[1], loc[1] + dir[1] * (hallLength - 1));\n    const width = Math.abs(dir[0] * hallLength) || hallWidth;\n    const height = Math.abs(dir[1] * hallLength) || hallWidth;\n    return new Hall(x, y, width, height);\n}\n\nexport class Room extends GWU.xy.Bounds {\n    public doors: GWU.xy.Loc[] = [];\n    public hall: Hall | null = null;\n\n    constructor(x: number, y: number, width: number, height: number) {\n        super(x, y, width, height);\n    }\n\n    get cx() {\n        return this.x + Math.floor(this.width / 2);\n    }\n    get cy() {\n        return this.y + Math.floor(this.height / 2);\n    }\n\n    translate(dx: number, dy: number) {\n        this.x += dx;\n        this.y += dy;\n\n        if (this.doors) {\n            this.doors.forEach((d) => {\n                if (!d) return;\n                if (d[0] < 0 || d[1] < 0) return;\n                d[0] += dx;\n                d[1] += dy;\n            });\n        }\n\n        if (this.hall) {\n            this.hall.translate(dx, dy);\n        }\n    }\n}\n\n// export interface DigInfo {\n//     room: RoomData;\n//     hall: HallData | null;\n//     tries: number;\n//     locs: GWU.xy.Loc[] | null;\n//     door: number;\n// }\n","import * as GWU from 'gw-utils';\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport function checkConfig(\n    config: TYPES.RoomConfig,\n    expected: TYPES.RoomConfig = {}\n) {\n    config = config || {};\n    expected = expected || {};\n\n    Object.entries(expected).forEach(([key, expect]) => {\n        let have = config[key];\n\n        if (key === 'tile') {\n            if (have === undefined) {\n                config[key] = expect as TYPES.TileId;\n            }\n            return;\n        }\n        if (expect === true) {\n            // needs to be present\n            if (!have) {\n                throw new Error(\n                    'Missing required config for room digger: ' + key\n                );\n            }\n        } else if (typeof expect === 'number') {\n            // needs to be a number, this is the default\n            have = have || expect;\n        } else if (Array.isArray(expect)) {\n            have = have || expect;\n        } else {\n            // just set the value\n            have = have || expect;\n        }\n\n        const range = GWU.range.make(have); // throws if invalid\n        config[key] = range;\n    });\n\n    return config;\n}\n\nexport abstract class RoomDigger {\n    public options: TYPES.RoomConfig = {};\n    public doors: GWU.xy.Loc[] = [];\n\n    constructor(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this._setOptions(config, expected);\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        this.options = checkConfig(config, expected);\n    }\n\n    create(site: SITE.Site): TYPES.Room {\n        const result = this.carve(site);\n        if (result) {\n            if (\n                !result.doors ||\n                result.doors.length == 0 ||\n                result.doors.every((loc) => !loc || loc[0] == -1)\n            ) {\n                result.doors = SITE.chooseRandomDoorSites(site);\n            }\n        }\n        return result;\n    }\n\n    abstract carve(site: SITE.Site): TYPES.Room;\n}\n\nexport var rooms: Record<string, RoomDigger> = {};\n\nexport class ChoiceRoom extends RoomDigger {\n    // @ts-ignore\n    public randomRoom: (rng: GWU.rng.Random) => string;\n\n    constructor(config: TYPES.RoomConfig = {}) {\n        super(config, {\n            choices: ['DEFAULT'],\n        });\n    }\n\n    _setOptions(config: TYPES.RoomConfig, expected: TYPES.RoomConfig = {}) {\n        const choices = config.choices || expected.choices;\n        if (Array.isArray(choices)) {\n            this.randomRoom = (rng) => rng.item(choices);\n        } else if (typeof choices == 'object') {\n            this.randomRoom = (rng) =>\n                rng.weighted(choices as GWU.rng.WeightedObject);\n        } else {\n            throw new Error(\n                'Expected choices to be either array of room ids or weighted map - ex: { ROOM_ID: weight }'\n            );\n        }\n    }\n\n    carve(site: SITE.Site) {\n        let id = this.randomRoom(site.rng);\n        const room = rooms[id];\n        if (!room) {\n            GWU.ERROR('Missing room digger choice: ' + id);\n        }\n\n        // debug('Chose room: ', id);\n        return room.create(site);\n    }\n}\n\nexport function choiceRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChoiceRoom(config);\n    return digger.create(site);\n}\n\nexport class Cavern extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 12,\n            height: 8,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const blobGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        const minWidth = Math.floor(0.5 * width); // 6\n        const maxWidth = width;\n        const minHeight = Math.floor(0.5 * height); // 4\n        const maxHeight = height;\n\n        const blob = new GWU.blob.Blob({\n            rng: site.rng,\n            rounds: 5,\n            minWidth: minWidth,\n            minHeight: minHeight,\n            maxWidth: maxWidth,\n            maxHeight: maxHeight,\n            percentSeeded: 55,\n            birthParameters: 'ffffftttt',\n            survivalParameters: 'ffffttttt',\n        });\n\n        const bounds = blob.carve(\n            blobGrid.width,\n            blobGrid.height,\n            (x, y) => (blobGrid[x][y] = 1)\n        );\n\n        // Position the new cave in the middle of the grid...\n        const destX = Math.floor((site.width - bounds.width) / 2);\n        const dx = destX - bounds.x;\n        const destY = Math.floor((site.height - bounds.height) / 2);\n        const dy = destY - bounds.y;\n\n        // ...and copy it to the destination.\n        blobGrid.forEach((v, x, y) => {\n            if (v) site.setTile(x + dx, y + dy, tile);\n        });\n        GWU.grid.free(blobGrid);\n\n        return new TYPES.Room(destX, destY, bounds.width, bounds.height);\n    }\n}\n\nexport function cavern(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cavern(config);\n    return digger.create(site);\n}\n\n// From BROGUE => This is a special room that appears at the entrance to the dungeon on depth 1.\nexport class BrogueEntrance extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: 20,\n            height: 10,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = Math.floor(0.4 * width); // 8\n        const roomHeight = height;\n        const roomWidth2 = width;\n        const roomHeight2 = Math.floor(0.5 * height); // 5\n\n        // ALWAYS start at bottom+center of map\n        const roomX = Math.floor(site.width / 2 - roomWidth / 2 - 1);\n        const roomY = site.height - roomHeight - 2;\n        const roomX2 = Math.floor(site.width / 2 - roomWidth2 / 2 - 1);\n        const roomY2 = site.height - roomHeight2 - 2;\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const room = new TYPES.Room(\n            Math.min(roomX, roomX2),\n            Math.min(roomY, roomY2),\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n\n        room.doors[GWU.xy.DOWN] = [Math.floor(site.width / 2), site.height - 2];\n        return room;\n    }\n}\n\nexport function brogueEntrance(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueEntrance(config);\n    return digger.create(site);\n}\n\nexport class Cross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 12, height: 20 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const roomWidth = width;\n        const roomWidth2 = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 75)) / 100)\n        ); // [4,20]\n        const roomHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 75)) / 100)\n        ); // [2,5]\n        const roomHeight2 = height;\n\n        const roomX = Math.floor((site.width - roomWidth) / 2);\n        const roomX2 =\n            roomX + site.rng.range(2, Math.max(2, roomWidth - roomWidth2 - 2));\n\n        const roomY2 = Math.floor((site.height - roomHeight2) / 2);\n        const roomY =\n            roomY2 +\n            site.rng.range(2, Math.max(2, roomHeight2 - roomHeight - 2));\n\n        GWU.xy.forRect(roomX, roomY, roomWidth, roomHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        GWU.xy.forRect(roomX2, roomY2, roomWidth2, roomHeight2, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            roomX,\n            roomY2,\n            Math.max(roomWidth, roomWidth2),\n            Math.max(roomHeight, roomHeight2)\n        );\n    }\n}\n\nexport function cross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Cross(config);\n    return digger.create(site);\n}\n\nexport class SymmetricalCross extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, { width: 7, height: 7 });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        let minorWidth = Math.max(\n            3,\n            Math.floor((width * site.rng.range(25, 50)) / 100)\n        ); // [2,4]\n        // if (height % 2 == 0 && minorWidth > 2) {\n        //     minorWidth -= 1;\n        // }\n        let minorHeight = Math.max(\n            3,\n            Math.floor((height * site.rng.range(25, 50)) / 100)\n        ); // [2,3]?\n        // if (width % 2 == 0 && minorHeight > 2) {\n        //     minorHeight -= 1;\n        // }\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - minorHeight) / 2);\n        GWU.xy.forRect(x, y, width, minorHeight, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        const x2 = Math.floor((site.width - minorWidth) / 2);\n        const y2 = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x2, y2, minorWidth, height, (x, y) =>\n            site.setTile(x, y, tile)\n        );\n        return new TYPES.Room(\n            Math.min(x, x2),\n            Math.min(y, y2),\n            Math.max(width, minorWidth),\n            Math.max(height, minorHeight)\n        );\n    }\n}\n\nexport function symmetricalCross(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new SymmetricalCross(config);\n    return digger.create(site);\n}\n\nexport class Rectangular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            width: [3, 6],\n            height: [3, 6],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor((site.width - width) / 2);\n        const y = Math.floor((site.height - height) / 2);\n        GWU.xy.forRect(x, y, width, height, (x, y) => site.setTile(x, y, tile));\n        return new TYPES.Room(x, y, width, height);\n    }\n}\n\nexport function rectangular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Rectangular(config);\n    return digger.create(site);\n}\n\nexport class Circular extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [3, 4],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        if (radius > 1) {\n            GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function circular(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new Circular(config);\n    return digger.create(site);\n}\n\nexport class BrogueDonut extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            radius: [5, 10],\n            ringMinWidth: 3,\n            holeMinSize: 3,\n            holeChance: 50,\n        });\n    }\n\n    carve(site: SITE.Site) {\n        const radius = this.options.radius.value(site.rng);\n        const ringMinWidth = this.options.ringMinWidth.value(site.rng);\n        const holeMinSize = this.options.holeMinSize.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const x = Math.floor(site.width / 2);\n        const y = Math.floor(site.height / 2);\n        GWU.xy.forCircle(x, y, radius, (x, y) => site.setTile(x, y, tile));\n\n        if (\n            radius > ringMinWidth + holeMinSize &&\n            site.rng.chance(this.options.holeChance.value(site.rng))\n        ) {\n            GWU.xy.forCircle(\n                x,\n                y,\n                site.rng.range(holeMinSize, radius - holeMinSize),\n                (x, y) => site.clearTile(x, y)\n            );\n        }\n\n        return new TYPES.Room(\n            x - radius,\n            y - radius,\n            radius * 2 + 1,\n            radius * 2 + 1\n        );\n    }\n}\n\nexport function brogueDonut(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new BrogueDonut(config);\n    return digger.create(site);\n}\n\nexport class ChunkyRoom extends RoomDigger {\n    constructor(config: Partial<TYPES.RoomConfig> = {}) {\n        super(config, {\n            count: [2, 12],\n            width: [5, 20],\n            height: [5, 20],\n        });\n    }\n\n    carve(site: SITE.Site) {\n        let i, x, y;\n        let chunkCount = this.options.count.value(site.rng);\n\n        const width = this.options.width.value(site.rng);\n        const height = this.options.height.value(site.rng);\n        const tile = this.options.tile || 'FLOOR';\n\n        const minX = Math.floor(site.width / 2) - Math.floor(width / 2);\n        const maxX = Math.floor(site.width / 2) + Math.floor(width / 2);\n        const minY = Math.floor(site.height / 2) - Math.floor(height / 2);\n        const maxY = Math.floor(site.height / 2) + Math.floor(height / 2);\n\n        let left = Math.floor(site.width / 2);\n        let right = left;\n        let top = Math.floor(site.height / 2);\n        let bottom = top;\n\n        GWU.xy.forCircle(left, top, 2, (x, y) => site.setTile(x, y, tile));\n        left -= 2;\n        right += 2;\n        top -= 2;\n        bottom += 2;\n\n        for (i = 0; i < chunkCount; ) {\n            x = site.rng.range(minX, maxX);\n            y = site.rng.range(minY, maxY);\n            if (site.isSet(x, y)) {\n                if (x - 2 < minX) continue;\n                if (x + 2 > maxX) continue;\n                if (y - 2 < minY) continue;\n                if (y + 2 > maxY) continue;\n\n                left = Math.min(x - 2, left);\n                right = Math.max(x + 2, right);\n                top = Math.min(y - 2, top);\n                bottom = Math.max(y + 2, bottom);\n\n                GWU.xy.forCircle(x, y, 2, (x, y) => site.setTile(x, y, tile));\n                i++;\n            }\n        }\n\n        return new TYPES.Room(left, top, right - left + 1, bottom - top + 1);\n    }\n}\n\nexport function chunkyRoom(config: TYPES.RoomConfig, site: SITE.Site) {\n    // grid.fill(0);\n    const digger = new ChunkyRoom(config);\n    return digger.create(site);\n}\n\nexport function install(id: string, room: RoomDigger) {\n    rooms[id] = room;\n    return room;\n}\n\ninstall('DEFAULT', new Rectangular());\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\nimport * as TYPES from './types';\n\nconst DIRS = GWU.xy.DIRS;\n\nexport function isDoorLoc(site: SITE.Site, loc: GWU.xy.Loc, dir: GWU.xy.Loc) {\n    if (!site.hasXY(loc[0], loc[1])) return false;\n    // TODO - boundary?\n    if (!site.isDiggable(loc[0], loc[1])) return false; // must be a wall/diggable space\n\n    const room = [loc[0] - dir[0], loc[1] - dir[1]];\n    if (!site.hasXY(room[0], room[1])) return false;\n    // TODO - boundary?\n    if (!site.isFloor(room[0], room[1])) return false; // must have floor in opposite direction\n\n    return true;\n}\n\nexport type WidthBase = number | string | number[] | { [key: number]: number };\n\nexport function pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    return GWU.clamp(_pickWidth(width, rng), 1, 3);\n}\n\nfunction _pickWidth(width: WidthBase, rng?: GWU.rng.Random): number {\n    if (!width) return 1;\n    if (typeof width === 'number') return width;\n\n    rng = rng ?? GWU.rng.random;\n\n    if (Array.isArray(width)) {\n        width = rng.weighted(width) + 1;\n    } else if (typeof width === 'string') {\n        width = GWU.range.make(width).value(rng);\n    } else if (width instanceof GWU.range.Range) {\n        width = width.value(rng);\n    } else {\n        const weights = width as GWU.types.WeightedObject;\n        width = Number.parseInt(rng.weighted(weights) as string);\n    }\n    return width;\n}\n\nexport function pickLength(\n    dir: number,\n    lengths: [GWU.range.Range, GWU.range.Range],\n    rng?: GWU.rng.Random\n): number {\n    if (dir == GWU.xy.UP || dir == GWU.xy.DOWN) {\n        return lengths[1].value(rng);\n    } else {\n        return lengths[0].value(rng);\n    }\n}\n\nexport function pickHallDirection(\n    site: SITE.Site,\n    doors: GWU.xy.Loc[],\n    lengths: [GWU.range.Range, GWU.range.Range]\n): number {\n    // Pick a direction.\n    let dir: number = GWU.xy.NO_DIRECTION;\n    if (dir == GWU.xy.NO_DIRECTION) {\n        const dirs = site.rng.sequence(4);\n        for (let i = 0; i < 4; i++) {\n            dir = dirs[i];\n            const length = lengths[(i + 1) % 2].hi; // biggest measurement\n            const door = doors[dir];\n            if (door && door[0] != -1 && door[1] != -1) {\n                const dx = door[0] + Math.floor(DIRS[dir][0] * length);\n                const dy = door[1] + Math.floor(DIRS[dir][1] * length);\n                if (site.hasXY(dx, dy)) {\n                    break; // That's our direction!\n                }\n            }\n            dir = GWU.xy.NO_DIRECTION;\n        }\n    }\n    return dir;\n}\n\nexport function pickHallExits(\n    site: SITE.Site,\n    x: number,\n    y: number,\n    dir: number,\n    obliqueChance: number\n) {\n    let newX: number, newY: number;\n    const allowObliqueHallwayExit = site.rng.chance(obliqueChance);\n    const hallDoors: GWU.xy.Loc[] = [\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n        // [-1, -1],\n    ];\n    for (let dir2 = 0; dir2 < 4; dir2++) {\n        newX = x + DIRS[dir2][0];\n        newY = y + DIRS[dir2][1];\n\n        if (\n            (dir2 != dir && !allowObliqueHallwayExit) ||\n            !site.hasXY(newX, newY) ||\n            site.isSet(newX, newY)\n        ) {\n            // do nothing\n        } else {\n            hallDoors[dir2] = [newX, newY];\n        }\n    }\n    return hallDoors;\n}\n\n// export function digWide(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     if (!opts.width) {\n//         opts.width = 2;\n//     }\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.lengths);\n//     const width = pickWidth(opts) || 2;\n\n//     const door = room.doors[dir];\n//     const tile = opts.tile || SITE.FLOOR;\n//     const hallDoors: GWU.xy.Loc[] = [];\n\n//     let x0: number, y0: number;\n//     let hall;\n//     if (dir === GWU.utils.UP) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] - length + 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y < y0 + length; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 - 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.DOWN) {\n//         x0 = GWU.clamp(door[0], room.x, room.x + room.width - width);\n//         y0 = door[1] + length - 1;\n\n//         for (let x = x0; x < x0 + width; ++x) {\n//             for (let y = y0; y > y0 - length; --y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0, y0 + 1];\n//         hall = new TYPES.Hall([x0, door[1]], dir, length, 2);\n//     } else if (dir === GWU.utils.LEFT) {\n//         x0 = door[0] - length + 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x < x0 + length; ++x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 - 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, 2);\n//     } else {\n//         //if (dir === GWU.utils.RIGHT) {\n//         x0 = door[0] + length - 1;\n//         y0 = GWU.clamp(door[1], room.y, room.y + room.height - width);\n\n//         for (let x = x0; x > x0 - length; --x) {\n//             for (let y = y0; y < y0 + width; ++y) {\n//                 grid[x][y] = tile;\n//             }\n//         }\n\n//         hallDoors[dir] = [x0 + 1, y0];\n//         hall = new TYPES.Hall([door[0], y0], dir, length, width);\n//     }\n\n//     hall.doors = hallDoors;\n//     hall.width = width;\n//     return hall;\n// }\n\n// export function dig(\n//     opts: TYPES.HallConfig,\n//     grid: GWU.grid.NumGrid,\n//     room: TYPES.Room\n// ): TYPES.Hall | TYPES.HallConfig | null {\n//     opts = opts || {};\n//     opts.width = 1;\n//     if (!grid) {\n//         return opts;\n//     }\n\n//     const dir = pickHallDirection(grid, room, opts);\n//     if (dir === GWU.xy.NO_DIRECTION) return null;\n\n//     const length = pickLength(dir, opts.length);\n\n//     const door = room.doors[dir];\n//     const DIR = DIRS[dir];\n\n//     let x = door[0];\n//     let y = door[1];\n\n//     const tile = opts.tile || SITE.FLOOR;\n//     for (let i = 0; i < length; i++) {\n//         grid[x][y] = tile;\n//         x += DIR[0];\n//         y += DIR[1];\n//     }\n\n//     x -= DIR[0];\n//     y -= DIR[1];\n\n//     const hall = new TYPES.Hall(door, dir, length);\n//     hall.doors = pickHallExits(grid, x, y, dir, opts);\n//     return hall;\n// }\n\nexport interface HallOptions {\n    width: number | string;\n    length: number | string | number[] | string[];\n    tile: TYPES.TileId;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport interface HallConfig {\n    width: WidthBase;\n    length: [GWU.range.Range, GWU.range.Range];\n    tile: string;\n    obliqueChance: number;\n    chance: number;\n}\n\nexport class HallDigger {\n    public config: HallConfig = {\n        width: 1,\n        length: [GWU.range.make('2-15'), GWU.range.make('2-9')],\n        tile: 'FLOOR',\n        obliqueChance: 15,\n        chance: 100,\n    };\n\n    constructor(options: Partial<HallOptions> = {}) {\n        this._setOptions(options);\n    }\n\n    _setOptions(options: Partial<HallOptions> = {}) {\n        if (options.width) {\n            this.config.width = options.width;\n        }\n        if (options.length) {\n            if (typeof options.length === 'number') {\n                const l = GWU.range.make(options.length);\n                this.config.length = [l, l];\n            }\n        }\n        if (options.tile) {\n            this.config.tile = options.tile;\n        }\n        if (options.chance) {\n            this.config.chance = options.chance;\n        }\n    }\n\n    create(site: SITE.Site, doors: GWU.xy.Loc[] = []): TYPES.Hall | null {\n        doors = doors || SITE.chooseRandomDoorSites(site);\n\n        if (!site.rng.chance(this.config.chance)) return null;\n\n        const dir = pickHallDirection(site, doors, this.config.length);\n        if (dir === GWU.xy.NO_DIRECTION) return null;\n        if (!doors[dir]) return null;\n\n        const width = pickWidth(this.config.width, site.rng);\n        const length = pickLength(dir, this.config.length, site.rng);\n        const doorLoc = doors[dir];\n\n        if (width == 1) {\n            return this.dig(site, dir, doorLoc, length);\n        } else {\n            return this.digWide(site, dir, doorLoc, length, width);\n        }\n    }\n\n    _digLine(\n        site: SITE.Site,\n        door: GWU.xy.Loc,\n        dir: GWU.xy.Loc,\n        length: number\n    ) {\n        let x = door[0];\n        let y = door[1];\n\n        const tile = this.config.tile;\n        for (let i = 0; i < length; i++) {\n            site.setTile(x, y, tile);\n            x += dir[0];\n            y += dir[1];\n        }\n\n        x -= dir[0];\n        y -= dir[1];\n\n        return [x, y];\n    }\n\n    dig(site: SITE.Site, dir: number, door: GWU.xy.Loc, length: number) {\n        const DIR = DIRS[dir];\n        const [x, y] = this._digLine(site, door, DIR, length);\n        const hall = TYPES.makeHall(door, dir, length);\n        hall.doors = pickHallExits(site, x, y, dir, this.config.obliqueChance);\n        return hall;\n    }\n\n    digWide(\n        site: SITE.Site,\n        dir: number,\n        door: GWU.xy.Loc,\n        length: number,\n        width: number\n    ) {\n        const DIR = GWU.xy.DIRS[dir];\n\n        const lower: GWU.xy.Loc = [door[0] - DIR[1], door[1] - DIR[0]];\n        const higher: GWU.xy.Loc = [door[0] + DIR[1], door[1] + DIR[0]];\n\n        this._digLine(site, door, DIR, length);\n        let actual = 1;\n        let startX = door[0];\n        let startY = door[1];\n\n        if (actual < width && isDoorLoc(site, lower, DIR)) {\n            this._digLine(site, lower, DIR, length);\n            startX = Math.min(lower[0], startX);\n            startY = Math.min(lower[1], startY);\n            ++actual;\n        }\n\n        if (actual < width && isDoorLoc(site, higher, DIR)) {\n            this._digLine(site, higher, DIR, length);\n            startX = Math.min(higher[0], startX);\n            startY = Math.min(higher[1], startY);\n            ++actual;\n        }\n\n        const hall = TYPES.makeHall([startX, startY], dir, length, width);\n        hall.doors = [];\n        hall.doors[dir] = [\n            door[0] + length * DIR[0],\n            door[1] + length * DIR[1],\n        ];\n        // hall.width = width;\n        return hall;\n    }\n}\n\nexport function dig(\n    config: Partial<HallOptions>,\n    site: SITE.Site,\n    doors: GWU.xy.Loc[]\n) {\n    const digger = new HallDigger(config);\n    return digger.create(site, doors);\n}\n\nexport var halls: Record<string, HallDigger> = {};\n\nexport function install(id: string, hall: HallDigger) {\n    // @ts-ignore\n    halls[id] = hall;\n    return hall;\n}\n\ninstall('DEFAULT', new HallDigger({ chance: 15 }));\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nimport * as TYPES from './types';\n\nexport interface LakeOpts {\n    height: number;\n    width: number;\n    minSize: number;\n    tries: number;\n    count: number;\n    canDisrupt: boolean;\n    wreathTile: TYPES.TileId;\n    wreathChance: number;\n    wreathSize: number;\n    tile: TYPES.TileId;\n}\n\nexport class Lakes {\n    options: LakeOpts = {\n        height: 15,\n        width: 30,\n        minSize: 5,\n        tries: 20,\n        count: 1,\n        canDisrupt: false,\n        wreathTile: 'SHALLOW',\n        wreathChance: 50,\n        wreathSize: 1,\n        tile: 'DEEP',\n    };\n\n    constructor(options: Partial<LakeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let i, j, k;\n        let x: number, y: number;\n        let lakeMaxHeight,\n            lakeMaxWidth,\n            lakeMinSize,\n            tries,\n            maxCount,\n            canDisrupt;\n        let count = 0;\n\n        lakeMaxHeight = this.options.height || 15; // TODO - Make this a range \"5-15\"\n        lakeMaxWidth = this.options.width || 30; // TODO - Make this a range \"5-30\"\n        lakeMinSize = this.options.minSize || 5;\n        tries = this.options.tries || 20;\n        maxCount = this.options.count || 1;\n        canDisrupt = this.options.canDisrupt || false;\n        const hasWreath = site.rng.chance(this.options.wreathChance)\n            ? true\n            : false;\n        const wreathTile = this.options.wreathTile || 'SHALLOW';\n        const wreathSize = this.options.wreathSize || 1; // TODO - make this a range \"0-2\" or a weighted choice { 0: 50, 1: 40, 2\" 10 }\n        const tile = this.options.tile || 'DEEP';\n\n        const lakeGrid = GWU.grid.alloc(site.width, site.height, 0);\n\n        let attempts = 0;\n        while (attempts < maxCount && count < maxCount) {\n            // lake generations\n\n            const width =\n                Math.round(\n                    ((lakeMaxWidth - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n            const height =\n                Math.round(\n                    ((lakeMaxHeight - lakeMinSize) * (maxCount - attempts)) /\n                        maxCount\n                ) + lakeMinSize;\n\n            const blob = new GWU.blob.Blob({\n                rng: site.rng,\n                rounds: 5,\n                minWidth: 4,\n                minHeight: 4,\n                maxWidth: width,\n                maxHeight: height,\n                percentSeeded: 55,\n                // birthParameters: 'ffffftttt',\n                // survivalParameters: 'ffffttttt',\n            });\n\n            lakeGrid.fill(0);\n            const bounds = blob.carve(\n                lakeGrid.width,\n                lakeGrid.height,\n                (x, y) => (lakeGrid[x][y] = 1)\n            );\n\n            // console.log('LAKE ATTEMPT');\n            // lakeGrid.dump();\n\n            let success = false;\n            for (k = 0; k < tries && !success; k++) {\n                // placement attempts\n                // propose a position for the top-left of the lakeGrid in the dungeon\n                x = site.rng.range(\n                    1 - bounds.x,\n                    lakeGrid.width - bounds.width - bounds.x - 2\n                );\n                y = site.rng.range(\n                    1 - bounds.y,\n                    lakeGrid.height - bounds.height - bounds.y - 2\n                );\n\n                if (canDisrupt || !this.isDisruptedBy(site, lakeGrid, -x, -y)) {\n                    // level with lake is completely connected\n                    //   dungeon.debug(\"Placed a lake!\", x, y);\n\n                    success = true;\n                    // copy in lake\n                    for (i = 0; i < bounds.width; i++) {\n                        // skip boundary\n                        for (j = 0; j < bounds.height; j++) {\n                            // skip boundary\n                            if (lakeGrid[i + bounds.x][j + bounds.y]) {\n                                const sx = i + bounds.x + x;\n                                const sy = j + bounds.y + y;\n                                site.setTile(sx, sy, tile);\n\n                                if (hasWreath) {\n                                    // if (site.hasTile(sx, sy, wreathTile)) {\n                                    //     site.clearTile(sx, sy, wreathTile);\n                                    // }\n                                    GWU.xy.forCircle(\n                                        sx,\n                                        sy,\n                                        wreathSize,\n                                        (i2, j2) => {\n                                            if (\n                                                site.isPassable(i2, j2) &&\n                                                !lakeGrid[i2 - x][j2 - y]\n                                                // SITE.isFloor(map, i, j) ||\n                                                // SITE.isDoor(map, i, j)\n                                            ) {\n                                                site.setTile(\n                                                    i2,\n                                                    j2,\n                                                    wreathTile\n                                                );\n                                            }\n                                        }\n                                    );\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n\n            if (success) {\n                ++count;\n                attempts = 0;\n            } else {\n                ++attempts;\n            }\n        }\n        GWU.grid.free(lakeGrid);\n        return count;\n    }\n\n    isDisruptedBy(\n        site: SITE.Site,\n        lakeGrid: GWU.grid.NumGrid,\n        lakeToMapX = 0,\n        lakeToMapY = 0\n    ) {\n        const walkableGrid = GWU.grid.alloc(site.width, site.height);\n        let disrupts = false;\n\n        // Get all walkable locations after lake added\n        GWU.xy.forRect(site.width, site.height, (i, j) => {\n            const lakeX = i + lakeToMapX;\n            const lakeY = j + lakeToMapY;\n            if (lakeGrid.get(lakeX, lakeY)) {\n                if (site.isStairs(i, j)) {\n                    disrupts = true;\n                }\n            } else if (site.isPassable(i, j)) {\n                walkableGrid[i][j] = 1;\n            }\n        });\n\n        let first = true;\n        for (let i = 0; i < walkableGrid.width && !disrupts; ++i) {\n            for (let j = 0; j < walkableGrid.height && !disrupts; ++j) {\n                if (walkableGrid[i][j] == 1) {\n                    if (first) {\n                        walkableGrid.floodFill(i, j, 1, 2);\n                        first = false;\n                    } else {\n                        disrupts = true;\n                    }\n                }\n            }\n        }\n\n        // console.log('WALKABLE GRID');\n        // walkableGrid.dump();\n\n        GWU.grid.free(walkableGrid);\n        return disrupts;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface BridgeOpts {\n    minDistance: number;\n    maxLength: number;\n}\n\nexport class Bridges {\n    public options: BridgeOpts = {\n        minDistance: 20,\n        maxLength: 5,\n    };\n\n    constructor(options: Partial<BridgeOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site): number {\n        let count = 0;\n        let newX, newY;\n        let i, j, d, x, y;\n\n        const maxLength = this.options.maxLength;\n        const minDistance = this.options.minDistance;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (\n                // map.hasXY(x, y) &&\n                // map.get(x, y) &&\n                site.isPassable(x, y) &&\n                (site.isBridge(x, y) || !site.isAnyLiquid(x, y))\n            ) {\n                for (d = 0; d <= 1; d++) {\n                    // Try right, then down\n                    const bridgeDir = dirCoords[d];\n                    newX = x + bridgeDir[0];\n                    newY = y + bridgeDir[1];\n                    j = maxLength;\n\n                    // if (!map.hasXY(newX, newY)) continue;\n\n                    // check for line of lake tiles\n                    // if (isBridgeCandidate(newX, newY, bridgeDir)) {\n                    if (\n                        site.isAnyLiquid(newX, newY) &&\n                        !site.isBridge(newX, newY)\n                    ) {\n                        for (j = 0; j < maxLength; ++j) {\n                            newX += bridgeDir[0];\n                            newY += bridgeDir[1];\n\n                            // if (!isBridgeCandidate(newX, newY, bridgeDir)) {\n                            if (\n                                site.isBridge(newX, newY) ||\n                                !site.isAnyLiquid(newX, newY)\n                            ) {\n                                break;\n                            }\n                        }\n                    }\n\n                    if (\n                        // map.get(newX, newY) &&\n                        site.isPassable(newX, newY) &&\n                        j < maxLength\n                    ) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            newX,\n                            newY,\n                            999\n                        );\n\n                        if (\n                            pathGrid.getDistance(x, y) > minDistance &&\n                            pathGrid.getDistance(x, y) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Bridge',\n                            //     x,\n                            //     y,\n                            //     ' => ',\n                            //     newX,\n                            //     newY\n                            // );\n\n                            while (x !== newX || y !== newY) {\n                                if (\n                                    this.isBridgeCandidate(\n                                        site,\n                                        x,\n                                        y,\n                                        bridgeDir\n                                    )\n                                ) {\n                                    site.setTile(x, y, 'BRIDGE'); // map[x][y] = SITE.BRIDGE;\n                                    // costGrid[x][y] = 1; // (Cost map also needs updating.)\n                                } else {\n                                    site.setTile(x, y, 'FLOOR'); // map[x][y] = SITE.FLOOR;\n                                    // costGrid[x][y] = 1;\n                                }\n                                x += bridgeDir[0];\n                                y += bridgeDir[1];\n                            }\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // GWU.grid.free(costGrid);\n        return count;\n    }\n\n    isBridgeCandidate(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        _bridgeDir: [number, number]\n    ) {\n        if (site.isBridge(x, y)) return true;\n        if (!site.isAnyLiquid(x, y)) return false;\n        // if (!site.isAnyLiquid(x + bridgeDir[1], y + bridgeDir[0])) return false;\n        // if (!site.isAnyLiquid(x - bridgeDir[1], y - bridgeDir[0])) return false;\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\n\nexport interface StairOpts {\n    up: boolean | GWU.xy.Loc;\n    down: boolean | GWU.xy.Loc;\n    minDistance: number;\n\n    start: boolean | string | GWU.xy.Loc;\n\n    upTile: TYPES.TileId;\n    downTile: TYPES.TileId;\n    wall: TYPES.TileId;\n}\n\nexport class Stairs {\n    public options: StairOpts = {\n        up: true,\n        down: true,\n        minDistance: 10,\n        start: false,\n        upTile: 'UP_STAIRS',\n        downTile: 'DOWN_STAIRS',\n        wall: 'IMPREGNABLE',\n    };\n\n    constructor(options: Partial<StairOpts> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let needUp = this.options.up !== false;\n        let needDown = this.options.down !== false;\n        const minDistance =\n            this.options.minDistance ||\n            Math.floor(Math.max(site.width, site.height) / 2);\n\n        const locations: Record<string, GWU.xy.Loc> = {};\n        let upLoc: GWU.xy.Loc | null = null;\n        let downLoc: GWU.xy.Loc | null = null;\n\n        const isValidLoc = this.isStairXY.bind(this, site);\n\n        if (this.options.start && typeof this.options.start !== 'string') {\n            let start = this.options.start;\n            if (start === true) {\n                start = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    isValidLoc\n                );\n            } else {\n                start = site.rng.matchingLocNear(\n                    GWU.xy.x(start),\n                    GWU.xy.y(start),\n                    isValidLoc\n                );\n            }\n            locations.start = start;\n        }\n\n        if (\n            Array.isArray(this.options.up) &&\n            Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n        } else if (\n            Array.isArray(this.options.up) &&\n            !Array.isArray(this.options.down)\n        ) {\n            const up = this.options.up;\n            upLoc = site.rng.matchingLocNear(\n                GWU.xy.x(up),\n                GWU.xy.y(up),\n                isValidLoc\n            );\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (\n            Array.isArray(this.options.down) &&\n            !Array.isArray(this.options.up)\n        ) {\n            const down = this.options.down;\n            downLoc = site.rng.matchingLocNear(\n                GWU.xy.x(down),\n                GWU.xy.y(down),\n                isValidLoc\n            );\n            if (needUp) {\n                upLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            GWU.xy.distanceBetween(\n                                x,\n                                y,\n                                downLoc![0],\n                                downLoc![1]\n                            ) < minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needUp) {\n            upLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n            if (needDown) {\n                downLoc = site.rng.matchingLoc(\n                    site.width,\n                    site.height,\n                    (x, y) => {\n                        if (\n                            // @ts-ignore\n                            GWU.xy.distanceBetween(x, y, upLoc![0], upLoc![1]) <\n                            minDistance\n                        )\n                            return false;\n                        return isValidLoc(x, y);\n                    }\n                );\n            }\n        } else if (needDown) {\n            downLoc = site.rng.matchingLoc(site.width, site.height, isValidLoc);\n        }\n\n        if (upLoc) {\n            locations.up = upLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                upLoc[0],\n                upLoc[1],\n                this.options.upTile,\n                this.options.wall\n            );\n            if (this.options.start === 'up') {\n                locations.start = locations.up;\n            } else {\n                locations.end = locations.up;\n            }\n        }\n        if (downLoc) {\n            locations.down = downLoc.slice() as GWU.xy.Loc;\n            this.setupStairs(\n                site,\n                downLoc[0],\n                downLoc[1],\n                this.options.downTile,\n                this.options.wall\n            );\n            if (this.options.start === 'down') {\n                locations.start = locations.down;\n            } else {\n                locations.end = locations.down;\n            }\n        }\n\n        return upLoc || downLoc ? locations : null;\n    }\n\n    hasXY(site: SITE.Site, x: number, y: number) {\n        if (x < 0 || y < 0) return false;\n        if (x >= site.width || y >= site.height) return false;\n        return true;\n    }\n\n    isStairXY(site: SITE.Site, x: number, y: number) {\n        let count = 0;\n        if (!this.hasXY(site, x, y) || !site.isDiggable(x, y)) return false;\n\n        for (let i = 0; i < 4; ++i) {\n            const dir = GWU.xy.DIRS[i];\n            if (!this.hasXY(site, x + dir[0], y + dir[1])) return false;\n            if (!this.hasXY(site, x - dir[0], y - dir[1])) return false;\n            if (site.isFloor(x + dir[0], y + dir[1])) {\n                count += 1;\n                if (!site.isDiggable(x - dir[0] + dir[1], y - dir[1] + dir[0]))\n                    return false;\n                if (!site.isDiggable(x - dir[0] - dir[1], y - dir[1] - dir[0]))\n                    return false;\n            } else if (!site.isDiggable(x + dir[0], y + dir[1])) {\n                return false;\n            }\n        }\n        return count == 1;\n    }\n\n    setupStairs(\n        site: SITE.Site,\n        x: number,\n        y: number,\n        tile: TYPES.TileId,\n        wallTile: TYPES.TileId\n    ) {\n        const indexes = site.rng.sequence(4);\n\n        let dir: GWU.xy.Loc | null = null;\n        for (let i = 0; i < indexes.length; ++i) {\n            dir = GWU.xy.DIRS[i];\n            const x0 = x + dir[0];\n            const y0 = y + dir[1];\n            if (site.isFloor(x0, y0)) {\n                if (site.isDiggable(x - dir[0], y - dir[1])) break;\n            }\n\n            dir = null;\n        }\n\n        if (!dir) GWU.ERROR('No stair direction found!');\n\n        site.setTile(x, y, tile);\n\n        const dirIndex = GWU.xy.CLOCK_DIRS.findIndex(\n            // @ts-ignore\n            (d) => d[0] == dir[0] && d[1] == dir[1]\n        );\n\n        for (let i = 0; i < GWU.xy.CLOCK_DIRS.length; ++i) {\n            const l = i ? i - 1 : 7;\n            const r = (i + 1) % 8;\n            if (i == dirIndex || l == dirIndex || r == dirIndex) continue;\n            const d = GWU.xy.CLOCK_DIRS[i];\n            site.setTile(x + d[0], y + d[1], wallTile);\n            // map.setCellFlags(x + d[0], y + d[1], Flags.Cell.IMPREGNABLE);\n        }\n\n        // dungeon.debug('setup stairs', x, y, tile);\n        return true;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from './site';\n\nexport interface LoopOptions {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport interface LoopConfig {\n    minDistance: number;\n    maxLength: number;\n    doorChance: number;\n}\n\nexport class LoopDigger {\n    public options: LoopConfig = {\n        minDistance: 100,\n        maxLength: 1,\n        doorChance: 50,\n    };\n\n    constructor(options: Partial<LoopOptions> = {}) {\n        GWU.object.assignObject(this.options, options);\n    }\n\n    create(site: SITE.Site) {\n        let startX, startY, endX, endY;\n        let i, j, d, x, y;\n\n        const minDistance = Math.min(\n            this.options.minDistance,\n            Math.floor(Math.max(site.width, site.height) / 2)\n        );\n        const maxLength = this.options.maxLength;\n\n        const pathGrid = new GWU.path.DijkstraMap();\n        // const costGrid = GWU.grid.alloc(site.width, site.height);\n\n        const dirCoords: [number, number][] = [\n            [1, 0],\n            [0, 1],\n        ];\n\n        // SITE.fillCostGrid(site, costGrid);\n\n        function isValidTunnelStart(\n            x: number,\n            y: number,\n            dir: [number, number]\n        ) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return false;\n            if (site.isSet(x + dir[1], y + dir[0])) return false;\n            if (site.isSet(x - dir[1], y - dir[0])) return false;\n            return true;\n        }\n\n        function isValidTunnelEnd(x: number, y: number, dir: [number, number]) {\n            if (!site.hasXY(x, y)) return false;\n            if (!site.hasXY(x + dir[1], y + dir[0])) return false;\n            if (!site.hasXY(x - dir[1], y - dir[0])) return false;\n            if (site.isSet(x, y)) return true;\n            if (site.isSet(x + dir[1], y + dir[0])) return true;\n            if (site.isSet(x - dir[1], y - dir[0])) return true;\n            return false;\n        }\n\n        let count = 0;\n        const seq = site.rng.sequence(site.width * site.height);\n\n        for (i = 0; i < seq.length; i++) {\n            x = Math.floor(seq[i] / site.height);\n            y = seq[i] % site.height;\n\n            if (!site.isSet(x, y)) {\n                for (d = 0; d <= 1; d++) {\n                    // Try a horizontal door, and then a vertical door.\n                    let dir = dirCoords[d];\n                    if (!isValidTunnelStart(x, y, dir)) continue;\n                    j = maxLength;\n\n                    // check up/left\n                    if (\n                        site.hasXY(x + dir[0], y + dir[1]) &&\n                        site.isPassable(x + dir[0], y + dir[1])\n                    ) {\n                        // just can't build directly into a door\n                        if (\n                            !site.hasXY(x - dir[0], y - dir[1]) ||\n                            site.isDoor(x - dir[0], y - dir[1])\n                        ) {\n                            continue;\n                        }\n                    } else if (\n                        site.hasXY(x - dir[0], y - dir[1]) &&\n                        site.isPassable(x - dir[0], y - dir[1])\n                    ) {\n                        if (\n                            !site.hasXY(x + dir[0], y + dir[1]) ||\n                            site.isDoor(x + dir[0], y + dir[1])\n                        ) {\n                            continue;\n                        }\n                        dir = dir.map((v) => -1 * v) as [number, number];\n                    } else {\n                        continue; // not valid start for tunnel\n                    }\n\n                    startX = x + dir[0];\n                    startY = y + dir[1];\n                    endX = x;\n                    endY = y;\n\n                    for (j = 0; j < maxLength; ++j) {\n                        endX -= dir[0];\n                        endY -= dir[1];\n\n                        // if (site.hasXY(endX, endY) && !grid.cell(endX, endY).isNull()) {\n                        if (isValidTunnelEnd(endX, endY, dir)) {\n                            break;\n                        }\n                    }\n\n                    if (j < maxLength) {\n                        SITE.computeDistanceMap(\n                            site,\n                            pathGrid,\n                            startX,\n                            startY,\n                            888\n                        );\n\n                        // pathGrid.fill(30000);\n                        // pathGrid[startX][startY] = 0;\n                        // dijkstraScan(pathGrid, costGrid, false);\n                        if (\n                            pathGrid.getDistance(endX, endY) > minDistance &&\n                            pathGrid.getDistance(endX, endY) < GWU.path.BLOCKED\n                        ) {\n                            // and if the pathing distance between the two flanking floor tiles exceeds minDistance,\n\n                            // dungeon.debug(\n                            //     'Adding Loop',\n                            //     startX,\n                            //     startY,\n                            //     ' => ',\n                            //     endX,\n                            //     endY,\n                            //     ' : ',\n                            //     pathGrid[endX][endY]\n                            // );\n\n                            while (endX !== startX || endY !== startY) {\n                                if (site.isNothing(endX, endY)) {\n                                    site.setTile(endX, endY, 'FLOOR');\n                                    // costGrid[endX][endY] = 1; // (Cost map also needs updating.)\n                                }\n                                endX += dir[0];\n                                endY += dir[1];\n                            }\n                            // TODO - Door is optional\n                            const tile = site.rng.chance(\n                                this.options.doorChance\n                            )\n                                ? 'DOOR'\n                                : 'FLOOR';\n                            site.setTile(x, y, tile); // then turn the tile into a doorway.\n                            ++count;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        // pathGrid.free();\n        // GWU.grid.free(costGrid);\n\n        return count;\n    }\n}\n\n// Add some loops to the otherwise simply connected network of rooms.\nexport function digLoops(site: SITE.Site, opts: Partial<LoopOptions> = {}) {\n    const digger = new LoopDigger(opts);\n    return digger.create(site);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as TYPES from './types';\nimport * as SITE from './site';\nimport * as ROOM from './room';\nimport * as HALL from './hall';\nimport * as LOOP from './loop';\nimport * as LAKE from './lake';\nimport * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\n\nimport * as LOGGER from './site/log/logger';\nimport { ConsoleLogger } from './site/log/consoleLogger';\n\nexport interface DoorOpts {\n    chance: number;\n    tile: string;\n}\n\nexport interface RoomOptions {\n    count: number;\n    fails: number;\n    first: string | string[] | Record<string, number> | ROOM.RoomDigger;\n    digger: string | string[] | Record<string, number> | ROOM.RoomDigger;\n}\n\nexport interface DiggerOptions {\n    halls?: Partial<HALL.HallOptions> | boolean;\n    loops?: Partial<LOOP.LoopOptions> | boolean;\n    lakes?: Partial<LAKE.LakeOpts> | boolean | number;\n    bridges?: Partial<BRIDGE.BridgeOpts> | boolean | number;\n    stairs?: Partial<STAIRS.StairOpts> | boolean;\n    doors?: Partial<DoorOpts> | boolean;\n\n    rooms?: number | Partial<RoomOptions>;\n\n    startLoc?: GWU.xy.Loc;\n    endLoc?: GWU.xy.Loc;\n    goesUp?: boolean;\n\n    seed?: number;\n    boundary?: boolean;\n\n    log?: LOGGER.Logger | boolean;\n}\n\nexport class Digger {\n    site!: SITE.Site;\n\n    seed = 0;\n    rooms: Partial<RoomOptions> = { fails: 20 };\n    doors: Partial<DoorOpts> = { chance: 15 };\n    halls: Partial<HALL.HallOptions> = { chance: 15 };\n    loops: Partial<LOOP.LoopOptions> | null = {};\n    lakes: Partial<LAKE.LakeOpts> | null = {};\n    bridges: Partial<BRIDGE.BridgeOpts> | null = {};\n    stairs: Partial<STAIRS.StairOpts> | null = {};\n    boundary: boolean = true;\n\n    // startLoc: GWU.xy.Loc = [-1, -1];\n    // endLoc: GWU.xy.Loc = [-1, -1];\n\n    locations: Record<string, GWU.xy.Loc> = {};\n    _locs: Record<string, GWU.xy.Loc> = {};\n    goesUp = false;\n\n    seq!: number[];\n    log: LOGGER.Logger;\n\n    constructor(options: DiggerOptions = {}) {\n        this.seed = options.seed || 0;\n\n        if (typeof options.rooms === 'number') {\n            options.rooms = { count: options.rooms };\n        }\n        GWU.object.setOptions(this.rooms, options.rooms);\n\n        this.goesUp = options.goesUp || false;\n        if (options.startLoc) {\n            this._locs.start = options.startLoc;\n        }\n        if (options.endLoc) {\n            this._locs.end = options.endLoc;\n        }\n\n        // Doors\n        if (options.doors === false) {\n            options.doors = { chance: 0 };\n        } else if (options.doors === true) {\n            options.doors = { chance: 100 };\n        }\n        GWU.object.setOptions(this.doors, options.doors);\n\n        // Halls\n        if (options.halls === false) {\n            options.halls = { chance: 0 };\n        } else if (options.halls === true) {\n            options.halls = {};\n        }\n        GWU.object.setOptions(this.halls, options.halls);\n\n        // Loops\n        if (options.loops === false) {\n            this.loops = null;\n        } else {\n            if (options.loops === true) options.loops = {};\n            else if (typeof options.loops === 'number') {\n                options.loops = { maxLength: options.loops };\n            }\n            options.loops = options.loops || {};\n            options.loops.doorChance =\n                options.loops.doorChance ?? options.doors?.chance;\n            // @ts-ignore\n            GWU.object.setOptions(this.loops, options.loops);\n        }\n\n        // Lakes\n        if (options.lakes === false) {\n            this.lakes = null;\n        } else {\n            if (options.lakes === true) options.lakes = {};\n            else if (typeof options.lakes === 'number') {\n                options.lakes = { count: options.lakes };\n            }\n            options.lakes = options.lakes || {};\n            // @ts-ignore\n            GWU.object.setOptions(this.lakes, options.lakes);\n        }\n\n        // Bridges\n        if (options.bridges === false) {\n            this.bridges = null;\n        } else {\n            if (typeof options.bridges === 'number') {\n                options.bridges = { maxLength: options.bridges };\n            }\n            if (options.bridges === true) options.bridges = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.bridges, options.bridges);\n        }\n\n        // Stairs\n        if (options.stairs === false) {\n            this.stairs = null;\n        } else {\n            if (typeof options.stairs !== 'object') options.stairs = {};\n            // @ts-ignore\n            GWU.object.setOptions(this.stairs, options.stairs);\n            this.stairs!.start = this.goesUp ? 'down' : 'up';\n        }\n\n        // this.startLoc = options.startLoc || [-1, -1];\n        // this.endLoc = options.endLoc || [-1, -1];\n\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else if (options.log) {\n            this.log = options.log;\n        } else {\n            this.log = new LOGGER.NullLogger();\n        }\n    }\n\n    _makeRoomSite(width: number, height: number) {\n        const site = new SITE.Site(width, height);\n        site.rng = this.site.rng;\n        return site;\n    }\n\n    _createSite(width: number, height: number): void {\n        this.site = new SITE.Site(width, height);\n    }\n\n    create(width: number, height: number, cb: TYPES.DigFn): boolean;\n    create(map: GWU.grid.NumGrid): boolean;\n    create(map: SITE.Site): boolean;\n    create(...args: any[]): boolean {\n        let needsFree = true;\n        if (args.length == 1) {\n            const dest = args[0];\n            if (dest instanceof SITE.Site) {\n                this.site = dest;\n                needsFree = false;\n            } else {\n                this._createSite(dest.width, dest.height);\n            }\n        } else {\n            this._createSite(args[0], args[1]);\n        }\n\n        const result = this._create(this.site);\n\n        const cb = args[2] || null;\n        if (cb) {\n            GWU.xy.forRect(this.site.width, this.site.height, (x, y) => {\n                const t = this.site._tiles[x][y];\n                if (t) cb(x, y, t);\n            });\n        } else if (args.length == 1 && needsFree) {\n            const dest = args[0];\n            dest.copy(this.site._tiles);\n        }\n\n        needsFree && this.site.free();\n        return result;\n    }\n\n    _create(site: SITE.Site): boolean {\n        this.start(site);\n\n        this.addRooms(site);\n\n        if (this.loops) {\n            this.addLoops(site, this.loops);\n            this.log.onLoopsAdded(site);\n        }\n        if (this.lakes) {\n            this.addLakes(site, this.lakes);\n            this.log.onLakesAdded(site);\n        }\n        if (this.bridges) {\n            this.addBridges(site, this.bridges);\n            this.log.onBridgesAdded(site);\n        }\n        if (this.stairs) {\n            this.addStairs(site, this.stairs);\n            this.log.onStairsAdded(site);\n        }\n\n        this.finish(site);\n\n        return true;\n    }\n\n    start(site: SITE.Site) {\n        this.site = site;\n\n        const seed = this.seed || GWU.rng.random.number();\n        site.setSeed(seed);\n\n        site.clear();\n        this.seq = site.rng.sequence(site.width * site.height);\n\n        this.locations = Object.assign({}, this._locs);\n\n        if (!this.locations.start || this.locations.start[0] < 0) {\n            const stair = this.goesUp ? 'down' : 'up';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.start = this.stairs[stair] as GWU.xy.Loc;\n            } else {\n                this.locations.start = [\n                    Math.floor(site.width / 2),\n                    site.height - 2,\n                ];\n                if (this.stairs && this.stairs[stair]) {\n                    this.stairs[stair] = this.locations.start;\n                }\n            }\n        }\n\n        if (!this.locations.end || this.locations.end[0] < 0) {\n            const stair = this.goesUp ? 'up' : 'down';\n            if (this.stairs && Array.isArray(this.stairs[stair])) {\n                this.locations.end = this.stairs[stair] as GWU.xy.Loc;\n            }\n        }\n\n        // if (this.startLoc[0] < 0 && this.startLoc[0] < 0) {\n        //     this.startLoc[0] = Math.floor(site.width / 2);\n        //     this.startLoc[1] = site.height - 2;\n        // }\n    }\n\n    getDigger(\n        id: string | string[] | Record<string, number> | ROOM.RoomDigger\n    ) {\n        if (!id) throw new Error('Missing digger!');\n        if (id instanceof ROOM.RoomDigger) return id;\n        if (typeof id === 'string') {\n            const digger = ROOM.rooms[id];\n            if (!digger) {\n                throw new Error('Failed to find digger - ' + id);\n            }\n            return digger;\n        }\n        return new ROOM.ChoiceRoom(id);\n    }\n\n    addRooms(site: SITE.Site) {\n        let tries = 20;\n        while (--tries) {\n            if (this.addFirstRoom(site)) break;\n        }\n        if (!tries) throw new Error('Failed to place first room!');\n        site.updateDoorDirs();\n\n        this.log.onDigFirstRoom(site);\n\n        // site.dump();\n        // console.log('- rng.number', site.rng.number());\n\n        let fails = 0;\n        let count = 1;\n        const maxFails = this.rooms.fails || 20;\n        while (fails < maxFails) {\n            if (this.addRoom(site)) {\n                fails = 0;\n                site.updateDoorDirs();\n                site.rng.shuffle(this.seq);\n\n                // site.dump();\n                // console.log('- rng.number', site.rng.number());\n\n                if (this.rooms.count && ++count >= this.rooms.count) {\n                    break; // we are done\n                }\n            } else {\n                ++fails;\n            }\n        }\n    }\n\n    addFirstRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.first || this.rooms.digger || 'DEFAULT'\n        );\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        if (\n            room &&\n            !this._attachRoomAtLoc(site, roomSite, room, this.locations.start)\n        ) {\n            room = null;\n        }\n        roomSite.free();\n        // Should we add the starting stairs now too?\n        return room;\n    }\n\n    addRoom(site: SITE.Site): TYPES.Room | null {\n        const roomSite = this._makeRoomSite(site.width, site.height);\n        let digger: ROOM.RoomDigger = this.getDigger(\n            this.rooms.digger || 'DEFAULT'\n        );\n\n        let room: TYPES.Room | null = digger.create(roomSite);\n\n        // attach hall?\n        if (room && this.halls.chance) {\n            let hall: TYPES.Hall | null = HALL.dig(\n                this.halls,\n                roomSite,\n                room.doors\n            );\n            if (hall) {\n                room.hall = hall;\n            }\n        }\n\n        // console.log('potential room');\n        // roomSite.dump();\n\n        if (room) {\n            this.log.onRoomCandidate(room, roomSite);\n\n            if (this._attachRoom(site, roomSite, room)) {\n                this.log.onRoomSuccess(site, room);\n            } else {\n                this.log.onRoomFailed(site, room, roomSite, 'Did not fit.');\n                room = null;\n            }\n        }\n\n        roomSite.free();\n        return room;\n    }\n\n    _attachRoom(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room\n    ): boolean {\n        // console.log('attachRoom');\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        let i = 0;\n        const len = this.seq.length;\n\n        // Slide hyperspace across real space, in a random but predetermined order, until the room matches up with a wall.\n        for (i = 0; i < len; i++) {\n            const x = Math.floor(this.seq[i] / site.height);\n            const y = this.seq[i] % site.height;\n\n            const dir = site.getDoorDir(x, y);\n            if (dir != GWU.xy.NO_DIRECTION) {\n                const oppDir = (dir + 2) % 4;\n                const door = doorSites[oppDir];\n                if (!door) continue;\n\n                const offsetX = x - door[0];\n                const offsetY = y - door[1];\n\n                if (\n                    door[0] != -1 &&\n                    this._roomFitsAt(site, roomSite, room, offsetX, offsetY)\n                ) {\n                    // TYPES.Room fits here.\n                    site.copyTiles(roomSite, offsetX, offsetY);\n                    this._attachDoor(site, room, x, y, oppDir);\n\n                    // door[0] = -1;\n                    // door[1] = -1;\n                    room.translate(offsetX, offsetY);\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _attachRoomAtLoc(\n        site: SITE.Site,\n        roomSite: SITE.Site,\n        room: TYPES.Room,\n        attachLoc: GWU.xy.Loc\n    ): boolean {\n        const [x, y] = attachLoc;\n        const doorSites = room.hall ? room.hall.doors : room.doors;\n        const dirs = site.rng.sequence(4);\n\n        // console.log('attachRoomAtXY', x, y, doorSites.join(', '));\n\n        for (let dir of dirs) {\n            const oppDir = (dir + 2) % 4;\n            const door = doorSites[oppDir];\n            if (!door || door[0] == -1) continue;\n\n            const offX = x - door[0];\n            const offY = y - door[1];\n\n            if (this._roomFitsAt(site, roomSite, room, offX, offY)) {\n                // dungeon.debug(\"attachRoom: \", x, y, oppDir);\n\n                // TYPES.Room fits here.\n                site.copyTiles(roomSite, offX, offY);\n                // this._attachDoor(site, room, x, y, oppDir);  // No door on first room!\n                room.translate(offX, offY);\n                // const newDoors = doorSites.map((site) => {\n                //     const x0 = site[0] + offX;\n                //     const y0 = site[1] + offY;\n                //     if (x0 == x && y0 == y) return [-1, -1] as GWU.xy.Loc;\n                //     return [x0, y0] as GWU.xy.Loc;\n                // });\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _roomFitsAt(\n        map: SITE.Site,\n        roomGrid: SITE.Site,\n        room: TYPES.Room,\n        roomToSiteX: number,\n        roomToSiteY: number\n    ) {\n        let xRoom, yRoom, xSite, ySite, i, j;\n\n        // console.log('roomFitsAt', roomToSiteX, roomToSiteY);\n\n        const hall = room.hall || room;\n        const left = Math.min(room.left, hall.left);\n        const top = Math.min(room.top, hall.top);\n        const right = Math.max(room.right, hall.right);\n        const bottom = Math.max(room.bottom, hall.bottom);\n\n        for (xRoom = left; xRoom <= right; xRoom++) {\n            for (yRoom = top; yRoom <= bottom; yRoom++) {\n                if (roomGrid.isSet(xRoom, yRoom)) {\n                    xSite = xRoom + roomToSiteX;\n                    ySite = yRoom + roomToSiteY;\n                    if (\n                        !map.hasXY(xSite, ySite) ||\n                        map.isBoundaryXY(xSite, ySite)\n                    ) {\n                        return false;\n                    }\n\n                    for (i = xSite - 1; i <= xSite + 1; i++) {\n                        for (j = ySite - 1; j <= ySite + 1; j++) {\n                            if (!map.isNothing(i, j)) {\n                                // console.log('- NO');\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // console.log('- YES');\n        return true;\n    }\n\n    _attachDoor(\n        site: SITE.Site,\n        room: TYPES.Room,\n        x: number,\n        y: number,\n        dir: number\n    ) {\n        const opts = this.doors;\n        let isDoor = false;\n\n        if (opts.chance && site.rng.chance(opts.chance)) {\n            isDoor = true;\n        }\n\n        const tile = isDoor ? opts.tile || 'DOOR' : 'FLOOR';\n        site.setTile(x, y, tile); // Door site.\n\n        // most cases...\n        if (!room.hall || room.hall.width == 1 || room.hall.height == 1) {\n            return;\n        }\n\n        if (dir === GWU.xy.UP || dir === GWU.xy.DOWN) {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x - k, y)) {\n                    if (site.isSet(x - k, y - 1) && site.isSet(x - k, y + 1)) {\n                        site.setTile(x - k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x + k, y)) {\n                    if (site.isSet(x + k, y - 1) && site.isSet(x + k, y + 1)) {\n                        site.setTile(x + k, y, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        } else {\n            let didSomething = true;\n            let k = 1;\n            while (didSomething) {\n                didSomething = false;\n\n                if (site.isNothing(x, y - k)) {\n                    if (site.isSet(x - 1, y - k) && site.isSet(x + 1, y - k)) {\n                        site.setTile(x, y - k, tile);\n                        didSomething = true;\n                    }\n                }\n                if (site.isNothing(x, y + k)) {\n                    if (site.isSet(x - 1, y + k) && site.isSet(x + 1, y + k)) {\n                        site.setTile(x, y + k, tile);\n                        didSomething = true;\n                    }\n                }\n                ++k;\n            }\n        }\n    }\n\n    addLoops(site: SITE.Site, opts: Partial<LOOP.LoopOptions>) {\n        const digger = new LOOP.LoopDigger(opts);\n        return digger.create(site);\n    }\n\n    addLakes(site: SITE.Site, opts: Partial<LAKE.LakeOpts>) {\n        const digger = new LAKE.Lakes(opts);\n        return digger.create(site);\n    }\n\n    addBridges(site: SITE.Site, opts: Partial<BRIDGE.BridgeOpts>) {\n        const digger = new BRIDGE.Bridges(opts);\n        return digger.create(site);\n    }\n\n    addStairs(site: SITE.Site, opts: Partial<STAIRS.StairOpts>) {\n        const digger = new STAIRS.Stairs(opts);\n        const locs = digger.create(site);\n        if (locs) Object.assign(this.locations, locs);\n        return !!locs;\n    }\n\n    finish(site: SITE.Site) {\n        this._removeDiagonalOpenings(site);\n        this._finishWalls(site);\n        this._finishDoors(site);\n    }\n\n    _removeDiagonalOpenings(site: SITE.Site) {\n        let i, j, k, x1, y1;\n        let diagonalCornerRemoved;\n\n        do {\n            diagonalCornerRemoved = false;\n            for (i = 0; i < site.width - 1; i++) {\n                for (j = 0; j < site.height - 1; j++) {\n                    for (k = 0; k <= 1; k++) {\n                        if (\n                            !site.blocksMove(i + k, j) &&\n                            site.blocksMove(i + (1 - k), j) &&\n                            site.blocksDiagonal(i + (1 - k), j) &&\n                            site.blocksMove(i + k, j + 1) &&\n                            site.blocksDiagonal(i + k, j + 1) &&\n                            !site.blocksMove(i + (1 - k), j + 1)\n                        ) {\n                            if (site.rng.chance(50)) {\n                                x1 = i + (1 - k);\n                                y1 = j;\n                            } else {\n                                x1 = i + k;\n                                y1 = j + 1;\n                            }\n                            diagonalCornerRemoved = true;\n                            site.setTile(x1, y1, 'FLOOR'); // todo - pick one of the passable tiles around it...\n                        }\n                    }\n                }\n            }\n        } while (diagonalCornerRemoved == true);\n    }\n\n    _finishDoors(site: SITE.Site) {\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isBoundaryXY(x, y)) return;\n\n            // todo - isDoorway...\n            if (site.isDoor(x, y)) {\n                // if (\n                //     // TODO - isPassable\n                //     (site.isPassable(x + 1, y) || site.isPassable(x - 1, y)) &&\n                //     (site.isPassable(x, y + 1) || site.isPassable(x, y - 1))\n                // ) {\n                //     // If there's passable terrain to the left or right, and there's passable terrain\n                //     // above or below, then the door is orphaned and must be removed.\n                //     site.setTile(x, y, SITE.FLOOR); // todo - take passable neighbor value\n                // } else\n                if (\n                    (site.isWall(x + 1, y) ? 1 : 0) +\n                        (site.isWall(x - 1, y) ? 1 : 0) +\n                        (site.isWall(x, y + 1) ? 1 : 0) +\n                        (site.isWall(x, y - 1) ? 1 : 0) !=\n                    2\n                ) {\n                    // If the door has three or more pathing blocker neighbors in the four cardinal directions,\n                    // then the door is orphaned and must be removed.\n                    site.setTile(x, y, 'FLOOR', { superpriority: true }); // todo - take passable neighbor\n                }\n            }\n        });\n    }\n\n    _finishWalls(site: SITE.Site) {\n        const boundaryTile = this.boundary ? 'IMPREGNABLE' : 'WALL';\n        GWU.xy.forRect(site.width, site.height, (x, y) => {\n            if (site.isNothing(x, y)) {\n                if (site.isBoundaryXY(x, y)) {\n                    site.setTile(x, y, boundaryTile);\n                } else {\n                    site.setTile(x, y, 'WALL');\n                }\n            }\n        });\n    }\n}\n\n// export function digMap(map: GWM.map.Map, options: Partial<DiggerOptions> = {}) {\n//     const digger = new Digger(options);\n//     return digger.create(map);\n// }\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\nimport * as LEVEL from './digger';\n\nimport * as TYPES from './types';\nimport * as ROOM from './room';\n// import * as HALL from './hall';\n// import * as LOOP from './loop';\n// import * as LAKE from './lake';\n// import * as BRIDGE from './bridge';\nimport * as STAIRS from './stairs';\nimport * as DIG from './digger';\nimport { RoomOptions } from '.';\n\nexport interface DungeonOptions extends DIG.DiggerOptions {\n    // seed?: number;\n    levels: number;\n    goesUp?: boolean;\n\n    width: number;\n    height: number;\n\n    entrance?: string | string[] | Record<string, number> | ROOM.RoomDigger;\n\n    startLoc?: GWU.xy.Loc;\n    startTile?: TYPES.TileId;\n    stairDistance?: number;\n\n    endLoc?: GWU.xy.Loc;\n    endTile?: TYPES.TileId;\n\n    // rooms?: {\n    //     count?: number;\n    //     digger?: string | ROOM.RoomDigger;\n    //     entrance?: string | ROOM.RoomDigger;\n    //     first?: string | ROOM.RoomDigger;\n    // };\n\n    // halls?: Partial<HALL.HallOptions>;\n    // loops?: Partial<LOOP.LoopOptions>;\n    // lakes?: Partial<LAKE.LakeOpts>;\n    // bridges?: Partial<BRIDGE.BridgeOpts>;\n    // stairs?: Partial<STAIRS.StairOpts>;\n\n    // boundary?: boolean;\n}\n\nexport type LocPair = [GWU.xy.Loc, GWU.xy.Loc];\n\nexport class Dungeon {\n    // @ts-ignore\n    config: DungeonOptions = {\n        levels: 1,\n        width: 80,\n        height: 34,\n        rooms: { fails: 20 },\n        // rooms: { count: 20, digger: 'DEFAULT' },\n        // halls: {},\n        // loops: {},\n        // lakes: {},\n        // bridges: {},\n        // stairs: {},\n\n        boundary: true,\n    };\n    seeds: number[] = [];\n    stairLocs: LocPair[] = [];\n\n    constructor(options: DungeonOptions) {\n        GWU.object.setOptions(this.config, options);\n\n        if (this.config.seed) {\n            GWU.rng.random.seed(this.config.seed);\n        }\n\n        if (typeof this.config.stairs === 'boolean' || !this.config.stairs) {\n            this.config.stairs = {};\n        }\n        if (!this.config.rooms) {\n            this.config.rooms = {};\n        } else if (typeof this.config.rooms === 'number') {\n            this.config.rooms = { count: this.config.rooms };\n        }\n\n        this._initSeeds();\n        this._initStairLocs();\n    }\n\n    get length() {\n        return this.config.levels;\n    }\n\n    _initSeeds() {\n        for (let i = 0; i < this.config.levels; ++i) {\n            this.seeds[i] = GWU.rng.random.number(2 ** 32);\n        }\n    }\n\n    _initStairLocs() {\n        let startLoc: GWU.xy.Loc = this.config.startLoc || [\n            Math.floor(this.config.width / 2),\n            this.config.height - 2,\n        ];\n\n        const minDistance =\n            this.config.stairDistance ||\n            Math.floor(Math.max(this.config.width / 2, this.config.height / 2));\n\n        let needUpdate = false;\n        for (let i = 0; i < this.config.levels; ++i) {\n            let endLoc: GWU.xy.Loc;\n\n            if (\n                this.stairLocs[i] &&\n                this.stairLocs[i][1] &&\n                this.stairLocs[i][1][0] > 0\n            ) {\n                endLoc = this.stairLocs[i][1];\n                needUpdate =\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) < minDistance;\n            } else {\n                endLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(\n                                startLoc[0],\n                                startLoc[1],\n                                x,\n                                y\n                            ) > minDistance\n                        );\n                    }\n                );\n            }\n\n            this.stairLocs[i] = [\n                [startLoc[0], startLoc[1]],\n                [endLoc[0], endLoc[1]],\n            ];\n            startLoc = endLoc;\n        }\n\n        if (needUpdate) {\n            // loop does not go all the way to level 0\n            for (let i = this.config.levels - 1; i > 0; --i) {\n                let [startLoc, endLoc] = this.stairLocs[i];\n\n                if (\n                    GWU.xy.distanceBetween(\n                        startLoc[0],\n                        startLoc[1],\n                        endLoc[0],\n                        endLoc[1]\n                    ) > minDistance\n                ) {\n                    break;\n                }\n\n                startLoc = GWU.rng.random.matchingLoc(\n                    this.config.width,\n                    this.config.height,\n                    (x, y) => {\n                        return (\n                            GWU.xy.distanceBetween(endLoc[0], endLoc[1], x, y) >\n                            minDistance\n                        );\n                    }\n                );\n\n                this.stairLocs[i][0] = startLoc;\n                this.stairLocs[i - 1][1] = startLoc;\n            }\n        }\n    }\n\n    getLevel(id: number, cb: TYPES.DigFn) {\n        if (id < 0 || id > this.config.levels)\n            throw new Error('Invalid level id: ' + id);\n\n        // Generate the level\n        const [startLoc, endLoc] = this.stairLocs[id];\n\n        const stairOpts = Object.assign(\n            {},\n            this.config.stairs as Partial<STAIRS.StairOpts>\n        );\n        if (this.config.goesUp) {\n            stairOpts.down = startLoc;\n            stairOpts.up = endLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.downTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.upTile = this.config.endTile;\n            }\n        } else {\n            stairOpts.down = endLoc;\n            stairOpts.up = startLoc;\n            if (id == 0 && this.config.startTile) {\n                stairOpts.upTile = this.config.startTile;\n            }\n            if (id == this.config.levels - 1 && this.config.endTile) {\n                stairOpts.downTile = this.config.endTile;\n            }\n        }\n\n        const rooms = Object.assign(\n            {},\n            this.config.rooms as Partial<RoomOptions>\n        );\n        if (id === 0 && this.config.entrance) {\n            rooms.first = this.config.entrance;\n        }\n\n        let width = this.config.width,\n            height = this.config.height;\n        // if (cb instanceof GWM.map.Map) {\n        //     width = cb.width;\n        //     height = cb.height;\n        // }\n\n        const levelOpts = {\n            seed: this.seeds[id],\n            loops: this.config.loops,\n            lakes: this.config.lakes,\n            bridges: this.config.bridges,\n\n            rooms: rooms,\n\n            stairs: stairOpts,\n            boundary: this.config.boundary,\n\n            goesUp: this.config.goesUp,\n            width,\n            height,\n        };\n\n        return this._makeLevel(id, levelOpts, cb);\n\n        // TODO - Update startLoc, endLoc\n    }\n\n    _makeLevel(id: number, opts: LEVEL.DiggerOptions, cb: TYPES.DigFn) {\n        const digger = new LEVEL.Digger(opts);\n        let result = false;\n        // if (cb instanceof GWM.map.Map) {\n        //     result = digger.create(cb);\n        // } else {\n        result = digger.create(this.config.width, this.config.height, cb);\n        // }\n\n        this.stairLocs[id] = [digger.locations.start, digger.locations.end];\n\n        // if (cb instanceof GWM.map.Map) {\n        //     const locs = this.stairLocs[id];\n        //     if (this.config.goesUp) {\n        //         cb.locations.down = cb.locations.start = locs[0];\n        //         cb.locations.up = cb.locations.end = locs[1];\n        //     } else {\n        //         cb.locations.down = cb.locations.start = locs[1];\n        //         cb.locations.up = cb.locations.end = locs[0];\n        //     }\n        // }\n        return result;\n    }\n}\n","import * as GWU from 'gw-utils';\nimport * as SITE from '../site';\nimport { Blueprint } from './blueprint';\n\nexport class BuildData {\n    site: SITE.Site;\n    blueprint: Blueprint;\n    interior: GWU.grid.NumGrid;\n    occupied: GWU.grid.NumGrid;\n    candidates: GWU.grid.NumGrid;\n    viewMap: GWU.grid.NumGrid;\n    distanceMap: GWU.path.DijkstraMap;\n    originX: number = -1;\n    originY: number = -1;\n    distance25: number = -1;\n    distance75: number = -1;\n    machineNumber: number;\n    // depth = 0;\n    // seed = 0;\n\n    constructor(site: SITE.Site, blueprint: Blueprint, machine = 0) {\n        this.site = site;\n        this.blueprint = blueprint;\n        this.interior = GWU.grid.alloc(site.width, site.height);\n        this.occupied = GWU.grid.alloc(site.width, site.height);\n        this.viewMap = GWU.grid.alloc(site.width, site.height);\n        this.distanceMap = new GWU.path.DijkstraMap(site.width, site.height);\n        this.candidates = GWU.grid.alloc(site.width, site.height);\n        this.machineNumber = machine;\n    }\n\n    free() {\n        GWU.grid.free(this.interior);\n        GWU.grid.free(this.occupied);\n        GWU.grid.free(this.viewMap);\n        GWU.grid.free(this.candidates);\n    }\n\n    get rng(): GWU.rng.Random {\n        return this.site.rng;\n    }\n\n    reset(originX: number, originY: number) {\n        this.interior.fill(0);\n        this.occupied.fill(0);\n        this.viewMap.fill(0);\n        this.distanceMap.reset(this.site.width, this.site.height);\n        // this.candidates.fill(0);\n\n        this.originX = originX;\n        this.originY = originY;\n        this.distance25 = 0;\n        this.distance75 = 0;\n\n        // if (this.seed) {\n        //     this.site.setSeed(this.seed);\n        // }\n    }\n\n    calcDistances(maxDistance: number) {\n        SITE.computeDistanceMap(\n            this.site,\n            this.distanceMap,\n            this.originX,\n            this.originY,\n            maxDistance\n        );\n\n        let qualifyingTileCount = 0;\n        const distances = new Array(100).fill(0);\n\n        this.interior.forEach((v, x, y) => {\n            if (!v) return;\n            const dist = Math.round(this.distanceMap.getDistance(x, y));\n            if (dist < 100) {\n                distances[dist]++; // create a histogram of distances -- poor man's sort function\n                qualifyingTileCount++;\n            }\n        });\n\n        let distance25 = Math.round(qualifyingTileCount / 4);\n        let distance75 = Math.round((3 * qualifyingTileCount) / 4);\n        for (let i = 0; i < 100; i++) {\n            if (distance25 <= distances[i]) {\n                distance25 = i;\n                break;\n            } else {\n                distance25 -= distances[i];\n            }\n        }\n\n        for (let i = 0; i < 100; i++) {\n            if (distance75 <= distances[i]) {\n                distance75 = i;\n                break;\n            } else {\n                distance75 -= distances[i];\n            }\n        }\n\n        this.distance25 = distance25;\n        this.distance75 = distance75;\n    }\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as STEP from './buildStep';\nimport { BuildData } from './data';\n\nconst Fl = GWU.flag.fl;\n\nexport enum Flags {\n    BP_ROOM = Fl(0), // spawns in a dead-end room that is dominated by a chokepoint of the given size (as opposed to a random place of the given size)\n    BP_VESTIBULE = Fl(1), // spawns in a doorway (location must be given) and expands outward, to guard the room\n    BP_REWARD = Fl(2), // metered reward machines\n    BP_ADOPT_ITEM = Fl(3), // the machine must adopt an item (e.g. a door key)\n\n    BP_PURGE_PATHING_BLOCKERS = Fl(4), // clean out traps and other T_PATHING_BLOCKERs\n    BP_PURGE_INTERIOR = Fl(5), // clean out all of the terrain in the interior before generating the machine\n    BP_PURGE_LIQUIDS = Fl(6), // clean out all of the liquids in the interior before generating the machine\n\n    BP_SURROUND_WITH_WALLS = Fl(7), // fill in any impassable gaps in the perimeter (e.g. water, lava, brimstone, traps) with wall\n    BP_IMPREGNABLE = Fl(8), // impassable perimeter and interior tiles are locked; tunneling bolts will bounce off harmlessly\n\n    BP_OPEN_INTERIOR = Fl(9), // clear out walls in the interior, widen the interior until convex or bumps into surrounding areas\n    BP_MAXIMIZE_INTERIOR = Fl(10), // same as BP_OPEN_INTERIOR but expands the room as far as it can go, potentially surrounding the whole level.\n    BP_REDESIGN_INTERIOR = Fl(11), // nuke and pave -- delete all terrain in the interior and build entirely new rooms within the bounds\n\n    BP_TREAT_AS_BLOCKING = Fl(12), // abort the machine if, were it filled with wall tiles, it would disrupt the level connectivity\n    BP_REQUIRE_BLOCKING = Fl(13), // abort the machine unless, were it filled with wall tiles, it would disrupt the level connectivity\n\n    BP_NO_INTERIOR_FLAG = Fl(14), // don't flag the area as being part of a machine\n    BP_NOT_IN_HALLWAY = Fl(15), // Do not allow building in hallways (for !ROOM, !VESTIBULE)\n}\n\nexport interface BlueprintOptions {\n    id: string;\n    tags: string | string[];\n    frequency: GWU.frequency.FrequencyConfig;\n    size: string | number[] | number;\n    flags: GWU.flag.FlagBase;\n    steps: Partial<STEP.StepOptions>[];\n}\n\nexport class Blueprint {\n    public tags: string[] = [];\n    public frequency: GWU.frequency.FrequencyFn;\n    public size: GWU.range.Range;\n    public flags: number = 0;\n    public steps: STEP.BuildStep[] = [];\n    public id: string = 'n/a';\n\n    constructor(opts: Partial<BlueprintOptions> = {}) {\n        if (opts.tags) {\n            if (typeof opts.tags === 'string') {\n                opts.tags = opts.tags.split(/[,|]/).map((v) => v.trim());\n            }\n            this.tags = opts.tags;\n        }\n        this.frequency = GWU.frequency.make(opts.frequency || 100);\n\n        if (opts.size) {\n            this.size = GWU.range.make(opts.size);\n            if (this.size.lo <= 0) this.size.lo = 1;\n            if (this.size.hi < this.size.lo) this.size.hi = this.size.lo;\n        } else {\n            this.size = GWU.range.make([1, 1]); // Anything bigger makes weird things happen\n        }\n        if (opts.flags) {\n            this.flags = GWU.flag.from(Flags, opts.flags);\n        }\n        if (opts.steps) {\n            this.steps = opts.steps.map((cfg) => new STEP.BuildStep(cfg));\n            this.steps.forEach((s, i) => (s.index = i));\n        }\n        if (opts.id) {\n            this.id = opts.id;\n        }\n\n        if (this.flags & Flags.BP_ADOPT_ITEM) {\n            if (\n                !this.steps.some((step) => {\n                    if (step.adoptItem) return true;\n                    if (step.hordeTakesItem && !step.item) return true;\n                    return false;\n                })\n            ) {\n                throw new Error(\n                    'Blueprint calls for BP_ADOPT_ITEM, but has no adoptive step.'\n                );\n            }\n        }\n    }\n\n    get isRoom() {\n        return !!(this.flags & Flags.BP_ROOM);\n    }\n    get isReward() {\n        return !!(this.flags & Flags.BP_REWARD);\n    }\n    get isVestiblue() {\n        return !!(this.flags & Flags.BP_VESTIBULE);\n    }\n    get adoptsItem() {\n        return !!(this.flags & Flags.BP_ADOPT_ITEM);\n    }\n    get treatAsBlocking() {\n        return !!(this.flags & Flags.BP_TREAT_AS_BLOCKING);\n    }\n    get requireBlocking() {\n        return !!(this.flags & Flags.BP_REQUIRE_BLOCKING);\n    }\n    get purgeInterior() {\n        return !!(this.flags & Flags.BP_PURGE_INTERIOR);\n    }\n    get purgeBlockers() {\n        return !!(this.flags & Flags.BP_PURGE_PATHING_BLOCKERS);\n    }\n    get purgeLiquids() {\n        return !!(this.flags & Flags.BP_PURGE_LIQUIDS);\n    }\n    get surroundWithWalls() {\n        return !!(this.flags & Flags.BP_SURROUND_WITH_WALLS);\n    }\n    get makeImpregnable() {\n        return !!(this.flags & Flags.BP_IMPREGNABLE);\n    }\n    get maximizeInterior() {\n        return !!(this.flags & Flags.BP_MAXIMIZE_INTERIOR);\n    }\n    get openInterior() {\n        return !!(this.flags & Flags.BP_OPEN_INTERIOR);\n    }\n    get noInteriorFlag() {\n        return !!(this.flags & Flags.BP_NO_INTERIOR_FLAG);\n    }\n\n    get notInHallway() {\n        return !!(this.flags & Flags.BP_NOT_IN_HALLWAY);\n    }\n\n    qualifies(requiredFlags: number, tags?: string | string[]) {\n        if (tags && tags.length) {\n            if (typeof tags === 'string') {\n                tags = tags.split(/[,|]/).map((v) => v.trim());\n            }\n            // Must match all tags!\n            if (!tags.every((want) => this.tags.includes(want))) return false;\n        }\n\n        if (\n            // Must have the required flags:\n            ~this.flags & requiredFlags ||\n            // May NOT have BP_ADOPT_ITEM unless that flag is required:\n            this.flags & Flags.BP_ADOPT_ITEM & ~requiredFlags ||\n            // May NOT have BP_VESTIBULE unless that flag is required:\n            this.flags & Flags.BP_VESTIBULE & ~requiredFlags\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    pickComponents(rng: GWU.rng.Random) {\n        const alternativeFlags = [\n            STEP.StepFlags.BS_ALTERNATIVE,\n            STEP.StepFlags.BS_ALTERNATIVE_2,\n        ];\n\n        const keepFeature = new Array(this.steps.length).fill(true);\n\n        for (let j = 0; j <= 1; j++) {\n            let totalFreq = 0;\n            for (let i = 0; i < keepFeature.length; i++) {\n                if (this.steps[i].flags & alternativeFlags[j]) {\n                    keepFeature[i] = false;\n                    totalFreq++;\n                }\n            }\n            if (totalFreq > 0) {\n                let randIndex = rng.range(1, totalFreq);\n                for (let i = 0; i < keepFeature.length; i++) {\n                    if (this.steps[i].flags & alternativeFlags[j]) {\n                        if (randIndex == 1) {\n                            keepFeature[i] = true; // This is the alternative that gets built. The rest do not.\n                            break;\n                        } else {\n                            randIndex--;\n                        }\n                    }\n                }\n            }\n        }\n\n        return this.steps.filter((_f, i) => keepFeature[i]);\n    }\n\n    fillInterior(builder: BuildData): number {\n        const interior = builder.interior;\n        const site = builder.site;\n\n        interior.fill(0);\n\n        // Find a location and map out the machine interior.\n        if (this.isRoom) {\n            // If it's a room machine, count up the gates of appropriate\n            // choke size and remember where they are. The origin of the room will be the gate location.\n\n            // Now map out the interior into interior[][].\n            // Start at the gate location and do a depth-first floodfill to grab all adjoining tiles with the\n            // same or lower choke value, ignoring any tiles that are already part of a machine.\n            // If we get false from this, try again. If we've tried too many times already, abort.\n            return addTileToInteriorAndIterate(\n                builder,\n                builder.originX,\n                builder.originY\n            );\n        } else if (this.isVestiblue) {\n            return computeVestibuleInterior(builder, this);\n            // success\n        } else {\n            // Find a location and map out the interior for a non-room machine.\n            // The strategy here is simply to pick a random location on the map,\n            // expand it along a pathing map by one space in all directions until the size reaches\n            // the chosen size, and then make sure the resulting space qualifies.\n            // If not, try again. If we've tried too many times already, abort.\n\n            let distanceMap = builder.distanceMap;\n\n            SITE.computeDistanceMap(\n                site,\n                distanceMap,\n                builder.originX,\n                builder.originY,\n                this.size.hi\n            );\n\n            const seq = site.rng.sequence(site.width * site.height);\n            let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n            let goalSize = this.size.value(); // Keeps track of the goal size.\n\n            for (let k = 0; k < 1000 && qualifyingTileCount < goalSize; k++) {\n                for (\n                    let n = 0;\n                    n < seq.length && qualifyingTileCount < goalSize;\n                    n++\n                ) {\n                    const i = Math.floor(seq[n] / site.height);\n                    const j = seq[n] % site.height;\n\n                    if (Math.round(distanceMap.getDistance(i, j)) == k) {\n                        interior[i][j] = 1;\n                        qualifyingTileCount++;\n\n                        const machine = site.getMachine(i, j);\n                        if (\n                            site.isOccupied(i, j) ||\n                            (machine > 0 && machine !== builder.machineNumber) // in different machine\n                        ) {\n                            // Abort if we've entered another machine or engulfed another machine's item or monster.\n                            return 0;\n                        }\n                    }\n                }\n            }\n            // If locationFailsafe runs out, tryAgain will still be true, and we'll try a different machine.\n            // If we're not choosing the blueprint, then don't bother with the locationFailsafe; just use the higher-level failsafe.\n            return qualifyingTileCount;\n        }\n    }\n\n    //  function redesignInterior( interior, originX, originY, theDungeonProfileIndex) {\n    //     let i, j, n, newX, newY;\n    //     let dir;\n    //     let orphanList = [];\n    //     let orphanCount = 0;\n\n    //     let grid, pathingGrid, costGrid;\n    //     grid = allocGrid();\n\n    //     for (i=0; i<DCOLS; i++) {\n    //         for (j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (i == originX && j == originY) {\n    //                     grid[i][j] = 1; // All rooms must grow from this space.\n    //                 } else {\n    //                     grid[i][j] = 0; // Other interior squares are fair game for placing rooms.\n    //                 }\n    //             } else if (cellIsPassableOrDoor(i, j)) {\n    //                 grid[i][j] = 1; // Treat existing level as already built (though shielded by a film of -1s).\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && interior[newX][newY]\n    //                         && (newX != originX || newY != originY)) {\n\n    //                         orphanList[orphanCount] = [newX, newY];\n    //                         orphanCount++;\n    //                         grid[i][j] = -1; // Treat the orphaned door as off limits.\n\n    //                         break;\n    //                     }\n    //                 }\n    //             } else {\n    //                 grid[i][j] = -1; // Exterior spaces are off limits.\n    //             }\n    //         }\n    //     }\n    //     await attachRooms(grid, dungeonProfileCatalog[theDungeonProfileIndex], 40, 40);\n\n    //     // Connect to preexisting rooms that were orphaned (mostly preexisting machine rooms).\n    //     if (orphanCount > 0) {\n    //         pathingGrid = allocGrid();\n    //         costGrid = allocGrid();\n    //         for (n = 0; n < orphanCount; n++) {\n\n    //             if (D_INSPECT_MACHINES) {\n    //                 dumpLevelToScreen();\n    //                 copyGrid(pathingGrid, grid);\n    //                 findReplaceGrid(pathingGrid, -1, -1, 0);\n    //                 hiliteGrid(pathingGrid, /* Color. */green, 50);\n    //                 plotCharWithColor('X', mapToWindowX(orphanList[n][0]), mapToWindowY(orphanList[n][1]), /* Color. */black, /* Color. */orange);\n    //                 await temporaryMessage(\"Orphan detected:\", true);\n    //             }\n\n    //             for (i=0; i<DCOLS; i++) {\n    //                 for (j=0; j<DROWS; j++) {\n    //                     if (interior[i][j]) {\n    //                         if (grid[i][j] > 0) {\n    //                             pathingGrid[i][j] = 0;\n    //                             costGrid[i][j] = 1;\n    //                         } else {\n    //                             pathingGrid[i][j] = 30000;\n    //                             costGrid[i][j] = 1;\n    //                         }\n    //                     } else {\n    //                         pathingGrid[i][j] = 30000;\n    //                         costGrid[i][j] = PDS_OBSTRUCTION;\n    //                     }\n    //                 }\n    //             }\n    //             dijkstraScan(pathingGrid, costGrid, false);\n\n    //             i = orphanList[n][0];\n    //             j = orphanList[n][1];\n    //             while (pathingGrid[i][j] > 0) {\n    //                 for (dir = 0; dir < 4; dir++) {\n    //                     newX = i + nbDirs[dir][0];\n    //                     newY = j + nbDirs[dir][1];\n\n    //                     if (coordinatesAreInMap(newX, newY)\n    //                         && pathingGrid[newX][newY] < pathingGrid[i][j]) {\n\n    //                         grid[i][j] = 1;\n    //                         i = newX;\n    //                         j = newY;\n    //                         break;\n    //                     }\n    //                 }\n    //                 brogueAssert(dir < 4);\n    //                 if (D_INSPECT_MACHINES) {\n    //                     dumpLevelToScreen();\n    //                     displayGrid(pathingGrid);\n    //                     plotCharWithColor('X', mapToWindowX(i), mapToWindowY(j), /* Color. */black, /* Color. */orange);\n    //                     await temporaryMessage(\"Orphan connecting:\", true);\n    //                 }\n    //             }\n    //         }\n    //         freeGrid(pathingGrid);\n    //         freeGrid(costGrid);\n    //     }\n\n    //     await addLoops(grid, 10);\n    //     for(i=0; i<DCOLS; i++) {\n    //         for(j=0; j<DROWS; j++) {\n    //             if (interior[i][j]) {\n    //                 if (grid[i][j] >= 0) {\n    //                     pmap[i][j].layers[SURFACE] = pmap[i][j].layers[GAS] = NOTHING;\n    //                 }\n    //                 if (grid[i][j] == 0) {\n    //                     pmap[i][j].layers[DUNGEON] = GRANITE;\n    //                     interior[i][j] = false;\n    //                 }\n    //                 if (grid[i][j] >= 1) {\n    //                     pmap[i][j].layers[DUNGEON] = FLOOR;\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     freeGrid(grid);\n    // }\n}\n\nexport function markCandidates(buildData: BuildData): number {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n    const blueprint = buildData.blueprint;\n    candidates.fill(0);\n\n    // Find a location and map out the machine interior.\n    if (blueprint.isRoom) {\n        // If it's a room machine, count up the gates of appropriate\n        // choke size and remember where they are. The origin of the room will be the gate location.\n\n        candidates.update((_v, x, y) => {\n            return site.isGateSite(x, y) &&\n                blueprint.size.contains(site.getChokeCount(x, y))\n                ? 1\n                : 0;\n        });\n    } else if (blueprint.isVestiblue) {\n        //  Door machines must have locations passed in. We can't pick one ourselves.\n        throw new Error(\n            'ERROR: Attempted to build a vestiblue without a location being provided.'\n        );\n    } else {\n        candidates.update((_v, x, y) => {\n            if (!site.isPassable(x, y)) return 0;\n            if (blueprint.notInHallway) {\n                const count = GWU.xy.arcCount(x, y, (i, j) =>\n                    site.isPassable(i, j)\n                );\n                return count <= 1 ? 1 : 0;\n            }\n            return 1;\n        });\n    }\n    return candidates.count((v) => v == 1);\n}\n\nexport function pickCandidateLoc(buildData: BuildData): GWU.xy.Loc | null {\n    const site = buildData.site;\n    const candidates = buildData.candidates;\n\n    const randSite = site.rng.matchingLoc(\n        site.width,\n        site.height,\n        (x, y) => candidates[x][y] == 1\n    );\n\n    if (!randSite || randSite[0] < 0 || randSite[1] < 0) {\n        // If no suitable sites, abort.\n        return null;\n    }\n    return randSite;\n}\n\n// // Assume site has been analyzed (aka GateSites and ChokeCounts set)\n// export function computeInterior(\n//     builder: BuildData,\n//     blueprint: Blueprint\n// ): boolean {\n//     let failsafe = blueprint.isRoom ? 10 : 20;\n//     let tryAgain;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         tryAgain = false;\n//         if (--failsafe <= 0) {\n//             // console.log(\n//             //     `Failed to build blueprint ${blueprint.id}; failed repeatedly to find a suitable blueprint location.`\n//             // );\n//             return false;\n//         }\n\n//         let count = fillInterior(builder, blueprint);\n\n//         // Now make sure the interior map satisfies the machine's qualifications.\n//         if (!count) {\n//             console.debug('- no interior');\n//             tryAgain = true;\n//         } else if (!blueprint.size.contains(count)) {\n//             console.debug('- too small');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.treatAsBlocking &&\n//             SITE.siteDisruptedBy(site, interior, { machine: site.machineCount })\n//         ) {\n//             console.debug('- blocks');\n//             tryAgain = true;\n//         } else if (\n//             blueprint.requireBlocking &&\n//             SITE.siteDisruptedSize(site, interior) < 100\n//         ) {\n//             console.debug('- does not block');\n//             tryAgain = true;\n//         }\n\n//         // Now loop if necessary.\n//     } while (tryAgain);\n\n//     // console.log(tryAgain, failsafe);\n\n//     return true;\n// }\n\nexport function computeVestibuleInterior(\n    builder: BuildData,\n    blueprint: Blueprint\n): number {\n    let success = true;\n\n    const site = builder.site;\n    const interior = builder.interior;\n    interior.fill(0);\n\n    if (blueprint.size.hi == 1) {\n        interior[builder.originX][builder.originY] = 1;\n        return 1;\n    }\n\n    // If this is a wall - it is really an error (maybe manually trying a build location?)\n    const doorChokeCount = site.getChokeCount(builder.originX, builder.originY);\n    if (doorChokeCount > 10000) {\n        return 0;\n    }\n\n    const vestibuleLoc = [-1, -1];\n    let vestibuleChokeCount = doorChokeCount;\n    GWU.xy.eachNeighbor(\n        builder.originX,\n        builder.originY,\n        (x, y) => {\n            const count = site.getChokeCount(x, y);\n            if (count == doorChokeCount) return;\n            if (count > 10000) return;\n            if (count < 0) return;\n            vestibuleLoc[0] = x;\n            vestibuleLoc[1] = y;\n            vestibuleChokeCount = count;\n        },\n        true\n    );\n\n    const roomSize = vestibuleChokeCount - doorChokeCount;\n    if (blueprint.size.contains(roomSize)) {\n        // The room entirely fits within the vestibule desired size\n        const count = interior.floodFill(\n            vestibuleLoc[0],\n            vestibuleLoc[1],\n            (_v, i, j) => {\n                if (site.isOccupied(i, j)) {\n                    success = false;\n                }\n                return site.getChokeCount(i, j) === vestibuleChokeCount;\n            },\n            1\n        );\n        if (success && blueprint.size.contains(count)) return roomSize;\n    }\n\n    let qualifyingTileCount = 0; // Keeps track of how many interior cells we've added.\n    const wantSize = blueprint.size.value(site.rng); // Keeps track of the goal size.\n\n    const distMap = builder.distanceMap;\n    SITE.computeDistanceMap(\n        site,\n        distMap,\n        builder.originX,\n        builder.originY,\n        blueprint.size.hi\n    );\n\n    const cells = site.rng.sequence(site.width * site.height);\n    success = true;\n    for (let k = 0; k < 1000 && qualifyingTileCount < wantSize; k++) {\n        for (\n            let i = 0;\n            i < cells.length && qualifyingTileCount < wantSize;\n            ++i\n        ) {\n            const x = Math.floor(cells[i] / site.height);\n            const y = cells[i] % site.height;\n\n            const dist = Math.round(distMap.getDistance(x, y));\n\n            if (dist != k) continue;\n            if (site.isOccupied(x, y)) {\n                success = false;\n                qualifyingTileCount = wantSize;\n            }\n            if (site.getChokeCount(x, y) <= doorChokeCount) continue;\n\n            interior[x][y] = 1;\n            qualifyingTileCount += 1;\n        }\n    }\n\n    return qualifyingTileCount;\n}\n\n// Assumes (startX, startY) is in the machine.\n// Returns true if everything went well, and false if we ran into a machine component\n// that was already there, as we don't want to build a machine around it.\nfunction addTileToInteriorAndIterate(\n    builder: BuildData,\n    startX: number,\n    startY: number\n): number {\n    let goodSoFar = true;\n    const interior = builder.interior;\n    const site = builder.site;\n\n    let count = 1;\n    interior[startX][startY] = 1;\n    const startChokeCount = site.getChokeCount(startX, startY);\n\n    for (let dir = 0; dir < 4 && goodSoFar; dir++) {\n        const newX = startX + GWU.xy.DIRS[dir][0];\n        const newY = startY + GWU.xy.DIRS[dir][1];\n        if (!site.hasXY(newX, newY)) continue;\n        if (interior[newX][newY]) continue; // already done\n\n        if (\n            site.isOccupied(newX, newY) ||\n            (site.getMachine(newX, newY) && !site.isGateSite(newX, newY))\n        ) {\n            // Abort if there's an item in the room.\n            // Items haven't been populated yet, so the only way this could happen is if another machine\n            // previously placed an item here.\n            // Also abort if we're touching another machine at any point other than a gate tile.\n            return 0;\n        }\n        if (\n            site.getChokeCount(newX, newY) <= startChokeCount && // don't have to worry about walls since they're all 30000\n            !site.getMachine(newX, newY)\n        ) {\n            let additional = addTileToInteriorAndIterate(builder, newX, newY);\n            if (additional <= 0) return 0;\n            count += additional;\n        }\n    }\n    return count;\n}\n\nexport function maximizeInterior(\n    data: BuildData,\n    minimumInteriorNeighbors = 1\n) {\n    const interior = data.interior;\n    const site = data.site;\n    let interiorNeighborCount = 0;\n    // let openNeighborCount = 0;\n\n    let madeChange = true;\n    let interiorCount = 0;\n    let maxInteriorCount = data.blueprint.size.hi;\n    let gen = 0;\n\n    while (madeChange && interiorCount < maxInteriorCount) {\n        madeChange = false;\n        interiorCount = 0;\n        ++gen;\n        interior.forEach((i, x, y) => {\n            if (!i) return;\n            ++interiorCount;\n\n            if (i != gen) return;\n\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j) || interior[i][j]) return;\n                    if (interior.isBoundaryXY(i, j)) return;\n\n                    interiorNeighborCount = 0;\n                    let ok = true;\n                    GWU.xy.eachNeighbor(\n                        i,\n                        j,\n                        (x2, y2) => {\n                            if (interior[x2][y2]) {\n                                ++interiorNeighborCount;\n                            } else if (!site.isWall(x2, y2)) {\n                                ok = false; // non-interior and not wall\n                            } else if (site.getMachine(x2, y2)) {\n                                ok = false; // in another machine\n                            }\n                        },\n                        false // 8 dirs\n                    );\n\n                    if (!ok || interiorNeighborCount < minimumInteriorNeighbors)\n                        return;\n\n                    interior[i][j] = gen + 1;\n                    ++interiorCount;\n                    if (site.blocksPathing(i, j)) {\n                        site.setTile(i, j, 'FLOOR');\n                    }\n                    madeChange = true;\n                },\n                true // 4 dirs\n            );\n        });\n    }\n    interior.update((v) => (v > 0 ? 1 : 0));\n}\n\nexport function prepareInterior(builder: BuildData) {\n    const interior = builder.interior;\n    const site = builder.site;\n    const blueprint = builder.blueprint;\n\n    // If requested, clear and expand the room as far as possible until either it's convex or it bumps into surrounding rooms\n    if (blueprint.maximizeInterior) {\n        maximizeInterior(builder, 1);\n    } else if (blueprint.openInterior) {\n        maximizeInterior(builder, 4);\n    }\n\n    // If requested, cleanse the interior -- no interesting terrain allowed.\n    if (blueprint.purgeInterior) {\n        interior.forEach((v, x, y) => {\n            if (v) site.setTile(x, y, 'FLOOR');\n        });\n    } else {\n        if (blueprint.purgeBlockers) {\n            // If requested, purge pathing blockers -- no traps allowed.\n            interior.forEach((v, x, y) => {\n                if (!v) return;\n                if (site.blocksPathing(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n\n        // If requested, purge the liquid layer in the interior -- no liquids allowed.\n        if (blueprint.purgeLiquids) {\n            interior.forEach((v, x, y) => {\n                if (v && site.isAnyLiquid(x, y)) {\n                    site.setTile(x, y, 'FLOOR');\n                }\n            });\n        }\n    }\n\n    // Surround with walls if requested.\n    if (blueprint.surroundWithWalls) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return; // Not valid x,y\n                    if (interior[i][j]) return; // is part of machine\n                    if (site.isWall(i, j)) return; // is already a wall (of some sort)\n\n                    if (site.isGateSite(i, j)) return; // is a door site\n                    if (site.getMachine(i, j)) return; // is part of a machine\n\n                    if (site.blocksPathing(i, j)) return; // is a blocker for the player (water?)\n                    site.setTile(i, j, 'WALL');\n                },\n                false // all 8 directions\n            );\n        });\n    }\n\n    // Completely clear the interior, fill with granite, and cut entirely new rooms into it from the gate site.\n    // Then zero out any portion of the interior that is still wall.\n    // if (flags & BPFlags.BP_REDESIGN_INTERIOR) {\n    //     RUT.Map.Blueprint.redesignInterior(map, interior, originX, originY, dungeonProfileIndex);\n    // }\n\n    // Reinforce surrounding tiles and interior tiles if requested to prevent tunneling in or through.\n    if (blueprint.makeImpregnable) {\n        interior.forEach((v, x, y) => {\n            if (!v || site.isGateSite(x, y)) return;\n            site.makeImpregnable(x, y);\n            GWU.xy.eachNeighbor(\n                x,\n                y,\n                (i, j) => {\n                    if (!interior.hasXY(i, j)) return;\n                    if (interior[i][j]) return;\n                    if (site.isGateSite(i, j)) return;\n                    site.makeImpregnable(i, j);\n                },\n                false\n            );\n        });\n    }\n\n    // If necessary, label the interior as IS_IN_AREA_MACHINE or IS_IN_ROOM_MACHINE and mark down the number.\n    const machineNumber = builder.machineNumber;\n    interior.forEach((v, x, y) => {\n        if (!v) return;\n\n        if (!blueprint.noInteriorFlag) {\n            site.setMachine(x, y, machineNumber, blueprint.isRoom);\n        }\n\n        // secret doors mess up machines\n        // TODO - is this still true?\n        if (site.isSecretDoor(x, y)) {\n            site.setTile(x, y, 'DOOR');\n        }\n    });\n}\n\n// export function expandMachineInterior(\n//     builder: BuildData,\n//     minimumInteriorNeighbors = 1\n// ) {\n//     let madeChange;\n//     const interior = builder.interior;\n//     const site = builder.site;\n\n//     do {\n//         madeChange = false;\n//         interior.forEach((_v, x, y) => {\n//             // if (v && site.isDoor(x, y)) {\n//             //     site.setTile(x, y, SITE.FLOOR); // clean out the doors...\n//             //     return;\n//             // }\n//             if (site.hasCellFlag(x, y, GWM.flags.Cell.IS_IN_MACHINE)) return;\n//             if (!site.blocksPathing(x, y)) return;\n\n//             let nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // Not in map\n//                     if (interior.isBoundaryXY(i, j)) return; // Not on boundary\n\n//                     if (interior[i][j] && !site.blocksPathing(i, j)) {\n//                         ++nbcount; // in machine and open tile\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount < minimumInteriorNeighbors) return;\n\n//             nbcount = 0;\n//             GWU.xy.eachNeighbor(\n//                 x,\n//                 y,\n//                 (i, j) => {\n//                     if (!interior.hasXY(i, j)) return; // not on map\n//                     if (interior[i][j]) return; // already part of machine\n//                     if (\n//                         !site.isWall(i, j) ||\n//                         site.hasCellFlag(i, j, GWM.flags.Cell.IS_IN_MACHINE)\n//                     ) {\n//                         ++nbcount; // tile is not a wall or is in a machine\n//                     }\n//                 },\n//                 false\n//             );\n\n//             if (nbcount) return;\n\n//             // Eliminate this obstruction; welcome its location into the machine.\n//             madeChange = true;\n//             interior[x][y] = 1;\n//             if (site.blocksPathing(x, y)) {\n//                 site.setTile(x, y, SITE.FLOOR);\n//             }\n//             GWU.xy.eachNeighbor(x, y, (i, j) => {\n//                 if (!interior.hasXY(i, j)) return;\n//                 if (site.isSet(i, j)) return;\n//                 site.setTile(i, j, SITE.WALL);\n//             });\n//         });\n//     } while (madeChange);\n// }\n\n///////////////////////////\n// INSTALL\n\nexport const blueprints: Record<string, Blueprint> = {};\n\nexport function install(\n    id: string,\n    blueprint: Blueprint | Partial<BlueprintOptions>\n) {\n    if (!(blueprint instanceof Blueprint)) {\n        blueprint = new Blueprint(blueprint);\n    }\n    blueprints[id] = blueprint;\n    blueprint.id = id;\n    return blueprint;\n}\n\nexport function random(\n    requiredFlags: number,\n    depth: number,\n    rng?: GWU.rng.Random\n): Blueprint {\n    const matches = Object.values(blueprints).filter(\n        (b) => b.qualifies(requiredFlags) && b.frequency(depth)\n    );\n    rng = rng || GWU.rng.random;\n    return rng.item(matches);\n}\n\nexport function get(id: string | Blueprint): Blueprint {\n    if (id instanceof Blueprint) return id;\n    return blueprints[id];\n}\n\nexport function make(config: Partial<BlueprintOptions>): Blueprint {\n    // if (!config.id) throw new Error('id is required to make Blueprint.');\n    return new Blueprint(config);\n}\n","import * as GWU from 'gw-utils';\n// import * as GWM from 'gw-map';\n\nimport * as SITE from '../site';\nimport * as BLUE from './blueprint';\nimport * as STEP from './buildStep';\nimport * as ITEM from '../site/item';\nimport * as HORDE from '../site/horde';\n\nimport { BuildData } from './data';\nimport { NullLogger, Logger } from '../site/log/logger';\nimport { ConsoleLogger } from '../site/log/consoleLogger';\nimport { DisruptOptions, Site } from '../site';\n\nexport type BlueType = BLUE.Blueprint | string;\n\nexport interface BuilderOptions {\n    blueprints: BlueType[] | { [key: string]: BlueType };\n    log: Logger | boolean;\n    seed: number;\n}\n\nexport interface BuildInfo {\n    x: number;\n    y: number;\n}\n\nexport type BuildResult = BuildInfo | null;\n\nexport class Builder {\n    blueprints: BLUE.Blueprint[] | null = null;\n    log: Logger;\n    seed: number;\n\n    constructor(options: Partial<BuilderOptions> = {}) {\n        if (options.blueprints) {\n            if (!Array.isArray(options.blueprints)) {\n                options.blueprints = Object.values(options.blueprints);\n            }\n            this.blueprints = options.blueprints.map((v) => BLUE.get(v));\n        }\n        if (options.log === true) {\n            this.log = new ConsoleLogger();\n        } else {\n            this.log = options.log || new NullLogger();\n        }\n        if (options.seed) {\n            this.seed = options.seed;\n        } else {\n            this.seed = 0;\n        }\n    }\n\n    _pickRandom(\n        requiredFlags: number,\n        depth: number,\n        rng?: GWU.rng.Random\n    ): BLUE.Blueprint | null {\n        rng = rng || GWU.rng.random;\n        const blueprints = this.blueprints || Object.values(BLUE.blueprints);\n        const weights = blueprints.map((b) => {\n            if (!b.qualifies(requiredFlags)) return 0;\n            return b.frequency(depth);\n        });\n\n        const index = rng.weighted(weights) as number;\n        return blueprints[index] || null;\n    }\n\n    buildRandom(\n        site: Site,\n        requiredMachineFlags = BLUE.Flags.BP_ROOM,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        const depth = site.depth;\n\n        let tries = 0;\n        while (tries < 10) {\n            const blueprint = this._pickRandom(\n                requiredMachineFlags,\n                depth,\n                site.rng\n            );\n            if (!blueprint) {\n                this.log.onBuildError(\n                    `Failed to find matching blueprint: requiredMachineFlags : ${GWU.flag.toString(\n                        BLUE.Flags,\n                        requiredMachineFlags\n                    )}, depth: ${depth}`\n                );\n                return null;\n            }\n\n            const data = new BuildData(site, blueprint);\n            site.analyze();\n\n            this.log.onBlueprintPick(data, requiredMachineFlags, depth);\n\n            if (this._buildAt(data, x, y, adoptedItem)) {\n                return { x, y };\n            }\n            ++tries;\n        }\n\n        // console.log(\n        //     'Failed to build random blueprint matching flags: ' +\n        //         GWU.flag.toString(BLUE.Flags, requiredMachineFlags) +\n        //         ' tried : ' +\n        //         tries.join(', ')\n        // );\n        return null;\n    }\n\n    build(\n        site: Site,\n        blueprint: BLUE.Blueprint | string,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (typeof blueprint === 'string') {\n            const id = blueprint;\n            blueprint = BLUE.blueprints[id];\n            if (!blueprint) throw new Error('Failed to find blueprint - ' + id);\n        }\n\n        if (this.seed) {\n            site.rng.seed(this.seed);\n        }\n\n        const data = new BuildData(site, blueprint);\n        site.analyze();\n\n        return this._buildAt(data, x, y, adoptedItem);\n    }\n\n    _buildAt(\n        data: BuildData,\n        x = -1,\n        y = -1,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        if (x >= 0 && y >= 0) {\n            return this._build(data, x, y, adoptedItem);\n        }\n\n        let count = this._markCandidates(data);\n        if (!count) {\n            return null;\n        }\n\n        let tries = 20; // TODO - Make property of Blueprint\n        while (count-- && tries--) {\n            const loc = BLUE.pickCandidateLoc(data) || false;\n            if (loc) {\n                if (this._build(data, loc[0], loc[1], adoptedItem)) {\n                    return { x: loc[0], y: loc[1] };\n                }\n            }\n        }\n\n        this.log.onBlueprintFail(\n            data,\n            'No suitable locations found to build blueprint.'\n        );\n        return null;\n    }\n\n    //////////////////////////////////////////\n    // Returns true if the machine got built; false if it was aborted.\n    // If empty array spawnedItems or spawnedMonsters is given, will pass those back for deletion if necessary.\n    _build(\n        data: BuildData,\n        originX: number,\n        originY: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): BuildResult {\n        data.reset(originX, originY);\n        this.log.onBlueprintStart(data, adoptedItem);\n\n        if (!this._computeInterior(data)) {\n            return null;\n        }\n\n        // This is the point of no return. Back up the level so it can be restored if we have to abort this machine after this point.\n        const snapshot = data.site.snapshot();\n        data.machineNumber = data.site.nextMachineId(); // Reserve this machine number, starting with 1.\n\n        // Perform any transformations to the interior indicated by the blueprint flags, including expanding the interior if requested.\n        BLUE.prepareInterior(data);\n\n        // Calculate the distance map (so that features that want to be close to or far from the origin can be placed accordingly)\n        // and figure out the 33rd and 67th percentiles for features that want to be near or far from the origin.\n        data.calcDistances(data.blueprint.size.hi);\n\n        // Now decide which features will be skipped -- of the features marked MF_ALTERNATIVE, skip all but one, chosen randomly.\n        // Then repeat and do the same with respect to MF_ALTERNATIVE_2, to provide up to two independent sets of alternative features per machine.\n\n        const components = data.blueprint.pickComponents(data.site.rng);\n\n        // Zero out occupied[][], and use it to keep track of the personal space around each feature that gets placed.\n\n        // Now tick through the features and build them.\n        for (let index = 0; index < components.length; index++) {\n            const component = components[index];\n            // console.log('BUILD COMPONENT', component);\n\n            if (!this._buildStep(data, component, adoptedItem)) {\n                // failure! abort!\n                // Restore the map to how it was before we touched it.\n                this.log.onBlueprintFail(\n                    data,\n                    `Failed to build step ${component.index + 1}/${\n                        data.blueprint.steps.length\n                    }.`\n                );\n                data.site.restore(snapshot);\n                snapshot.free();\n                // abortItemsAndMonsters(spawnedItems, spawnedMonsters);\n                return null;\n            }\n        }\n\n        // Clear out the interior flag for all non-wired cells, if requested.\n        if (data.blueprint.noInteriorFlag) {\n            SITE.clearInteriorFlag(data.site, data.machineNumber);\n        }\n\n        // if (torchBearer && torch) {\n        // \tif (torchBearer->carriedItem) {\n        // \t\tdeleteItem(torchBearer->carriedItem);\n        // \t}\n        // \tremoveItemFromChain(torch, floorItems);\n        // \ttorchBearer->carriedItem = torch;\n        // }\n\n        this.log.onBlueprintSuccess(data);\n\n        snapshot.free();\n\n        // console.log('Built a machine from blueprint:', originX, originY);\n        return { x: originX, y: originY };\n    }\n\n    _markCandidates(data: BuildData): number {\n        const count = BLUE.markCandidates(data);\n\n        if (count <= 0) {\n            this.log.onBlueprintFail(\n                data,\n                'No suitable candidate locations found.'\n            );\n            return 0;\n        }\n\n        this.log.onBlueprintCandidates(data);\n\n        return count;\n    }\n\n    _computeInterior(data: BuildData): boolean {\n        let fail = null;\n        let count = data.blueprint.fillInterior(data);\n\n        // Now make sure the interior map satisfies the machine's qualifications.\n        if (!count) {\n            fail = 'Interior error.';\n        } else if (!data.blueprint.size.contains(count)) {\n            fail = `Interior wrong size - have: ${count}, want: ${data.blueprint.size.toString()}`;\n        } else if (\n            data.blueprint.treatAsBlocking &&\n            SITE.siteDisruptedBy(data.site, data.interior, {\n                machine: data.site.machineCount,\n            })\n        ) {\n            fail = 'Interior blocks map.';\n        } else if (\n            data.blueprint.requireBlocking &&\n            SITE.siteDisruptedSize(data.site, data.interior) < 100\n        ) {\n            fail = 'Interior does not block enough cells.';\n        }\n\n        if (!fail) {\n            this.log.onBlueprintInterior(data);\n\n            return true;\n        }\n\n        this.log.onBlueprintFail(data, fail);\n        return false;\n    }\n\n    _buildStep(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        adoptedItem: ITEM.ItemInstance | null\n    ) {\n        let wantCount = 0;\n        let builtCount = 0;\n\n        const site = data.site;\n\n        this.log.onStepStart(data, buildStep, adoptedItem);\n\n        // console.log(\n        //     'buildComponent',\n        //     blueprint.id,\n        //     blueprint.steps.indexOf(buildStep)\n        // );\n\n        // Figure out the distance bounds.\n        const distanceBound = STEP.calcDistanceBound(data, buildStep);\n\n        // If the StepFlags.BS_REPEAT_UNTIL_NO_PROGRESS flag is set, repeat until we fail to build the required number of instances.\n\n        // Make a master map of candidate locations for this feature.\n        let qualifyingTileCount = 0;\n\n        if (buildStep.buildVestibule) {\n            // Generate a door guard machine.\n            // Try to create a sub-machine that qualifies.\n\n            let success = this.buildRandom(\n                data.site,\n                BLUE.Flags.BP_VESTIBULE,\n                data.originX,\n                data.originY\n            );\n\n            if (!success) {\n                this.log.onStepFail(\n                    data,\n                    buildStep,\n                    'Failed to build vestibule'\n                );\n                return false;\n            }\n        }\n\n        // If we are just building a vestibule, then we can exit here...\n        if (!buildStep.buildsInstances) {\n            this.log.onStepSuccess(data, buildStep);\n            return true;\n        }\n\n        const candidates = GWU.grid.alloc(site.width, site.height);\n\n        let didSomething = false;\n\n        do {\n            didSomething = false;\n\n            if (buildStep.buildAtOrigin) {\n                candidates[data.originX][data.originY] = 1;\n                qualifyingTileCount = 1;\n                wantCount = 1;\n            } else {\n                qualifyingTileCount = buildStep.markCandidates(\n                    data,\n                    candidates,\n                    distanceBound\n                );\n\n                if (\n                    buildStep.generateEverywhere ||\n                    buildStep.repeatUntilNoProgress\n                ) {\n                    wantCount = qualifyingTileCount;\n                } else {\n                    wantCount = buildStep.count.value(site.rng);\n                }\n\n                this.log.onStepCandidates(\n                    data,\n                    buildStep,\n                    candidates,\n                    wantCount\n                );\n\n                // get rid of all error/invalid codes\n                candidates.update((v) => (v == 1 ? 1 : 0));\n\n                if (\n                    !qualifyingTileCount ||\n                    qualifyingTileCount < buildStep.count.lo\n                ) {\n                    this.log.onStepFail(\n                        data,\n                        buildStep,\n                        `Only ${qualifyingTileCount} qualifying tiles - want ${buildStep.count.toString()}.`\n                    );\n                    return false;\n                }\n            }\n\n            let x = 0,\n                y = 0;\n\n            while (qualifyingTileCount > 0 && builtCount < wantCount) {\n                // Find a location for the feature.\n                if (buildStep.buildAtOrigin) {\n                    // Does the feature want to be at the origin? If so, put it there. (Just an optimization.)\n                    x = data.originX;\n                    y = data.originY;\n                } else {\n                    // Pick our candidate location randomly, and also strike it from\n                    // the candidates map so that subsequent instances of this same feature can't choose it.\n                    [x, y] = data.rng.matchingLoc(\n                        candidates.width,\n                        candidates.height,\n                        (x, y) => candidates[x][y] == 1\n                    );\n                }\n                // Don't waste time trying the same place again whether or not this attempt succeeds.\n                candidates[x][y] = 0;\n                qualifyingTileCount--;\n\n                const snapshot = data.site.snapshot();\n\n                if (\n                    this._buildStepInstance(data, buildStep, x, y, adoptedItem)\n                ) {\n                    // OK, if placement was successful, clear some personal space around the feature so subsequent features can't be generated too close.\n                    qualifyingTileCount -= buildStep.makePersonalSpace(\n                        data,\n                        x,\n                        y,\n                        candidates\n                    );\n                    builtCount++; // we've placed an instance\n                    didSomething = true;\n                    snapshot.free(); // This snapshot is useless b/c we made changes...\n                } else {\n                    data.site.restore(snapshot); // need to undo any changes...\n                    snapshot.free();\n                }\n\n                // Finished with this instance!\n            }\n        } while (didSomething && buildStep.repeatUntilNoProgress);\n\n        GWU.grid.free(candidates);\n\n        if (\n            !buildStep.count.contains(builtCount) &&\n            !buildStep.generateEverywhere &&\n            !buildStep.repeatUntilNoProgress\n        ) {\n            this.log.onStepFail(\n                data,\n                buildStep,\n                `Failed to build enough instances - want: ${buildStep.count.toString()}, built: ${builtCount}`\n            );\n            return false;\n        }\n\n        this.log.onStepSuccess(data, buildStep);\n\n        return true;\n    }\n\n    _buildStepInstance(\n        data: BuildData,\n        buildStep: STEP.BuildStep,\n        x: number,\n        y: number,\n        adoptedItem: ITEM.ItemInstance | null = null\n    ): boolean {\n        let success = true;\n        let didSomething = true;\n\n        const site = data.site;\n\n        if (success && buildStep.treatAsBlocking) {\n            // Yes, check for blocking.\n            const options: Partial<DisruptOptions> = {\n                machine: site.machineCount,\n            };\n            if (buildStep.noBlockOrigin) {\n                options.updateWalkable = (g) => {\n                    g[data.originX][data.originY] = 1;\n                    return true;\n                };\n            }\n            if (SITE.siteDisruptedByXY(site, x, y, options)) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'instance blocks map'\n                );\n                success = false;\n            }\n        }\n\n        // Try to build the DF first, if any, since we don't want it to be disrupted by subsequently placed terrain.\n        if (success && buildStep.feature) {\n            success = buildStep.feature(site, x, y);\n            didSomething = success;\n            if (!success) {\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to build effect - ' +\n                        JSON.stringify(buildStep.feature)\n                );\n            }\n        }\n\n        // Now try to place the terrain tile, if any.\n        if (success && buildStep.tile) {\n            if (\n                !buildStep.permitBlocking &&\n                site.tileBlocksMove(buildStep.tile) &&\n                !buildStep.treatAsBlocking // already did treatAsBlocking\n            ) {\n                if (\n                    SITE.siteDisruptedByXY(site, x, y, {\n                        machine: site.machineCount,\n                    })\n                ) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'tile blocks site'\n                    );\n                    success = false;\n                }\n            }\n\n            if (success) {\n                success = site.setTile(x, y, buildStep.tile);\n                didSomething = didSomething || success;\n                if (!success) {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'failed to set tile - ' + buildStep.tile\n                    );\n                }\n            }\n        }\n\n        let torch: ITEM.ItemInstance | null = adoptedItem;\n\n        // Generate an item, if necessary\n        if (success && buildStep.item) {\n            const itemInfo = ITEM.pickItem(data.site.depth, buildStep.item);\n\n            if (!itemInfo) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to make random item - ' +\n                        JSON.stringify(buildStep.item)\n                );\n            } else {\n                const item = ITEM.makeItem(itemInfo);\n                if (buildStep.itemIsKey) {\n                    item.key = {\n                        x,\n                        y,\n                        disposable: !!buildStep.keyIsDisposable,\n                    };\n                }\n\n                if (buildStep.outsourceItem) {\n                    const result = this.buildRandom(\n                        data.site,\n                        BLUE.Flags.BP_ADOPT_ITEM,\n                        -1,\n                        -1,\n                        item\n                    );\n                    if (result) {\n                        didSomething = true;\n                    } else {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to build machine to adopt item - ' + item.id\n                        );\n                        success = false;\n                    }\n                } else if (buildStep.hordeTakesItem) {\n                    torch = item;\n                } else {\n                    success = site.addItem(x, y, item) > 0;\n                    didSomething = didSomething || success;\n                    if (!success) {\n                        this.log.onStepInstanceFail(\n                            data,\n                            buildStep,\n                            x,\n                            y,\n                            'Failed to add item to site - ' + item.id\n                        );\n                    }\n                }\n            }\n        } else if (success && buildStep.adoptItem) {\n            // adopt item if necessary\n            if (!adoptedItem) {\n                throw new Error(\n                    'Failed to build blueprint because there is no adopted item.'\n                );\n            }\n\n            if (success) {\n                success = site.addItem(x, y, adoptedItem) > 0;\n                if (success) {\n                    didSomething = true;\n                } else {\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to add adopted item to site - ' + adoptedItem.id\n                    );\n                }\n            }\n        }\n\n        let torchBearer: HORDE.ActorInstance | null = null;\n\n        if (success && buildStep.horde) {\n            let horde = HORDE.pickHorde(\n                data.site.depth,\n                buildStep.horde,\n                site.rng\n            );\n            // if (buildStep.horde.random) {\n            //     horde = GWM.horde.random({ rng: site.rng });\n            // } else if (buildStep.horde.id) {\n            //     horde = GWM.horde.from(buildStep.horde.id);\n            // } else {\n            //     buildStep.horde.rng = site.rng;\n            //     horde = GWM.horde.random(buildStep.horde);\n            // }\n            if (!horde) {\n                success = false;\n                this.log.onStepInstanceFail(\n                    data,\n                    buildStep,\n                    x,\n                    y,\n                    'Failed to pick horde - ' + JSON.stringify(buildStep.horde)\n                );\n            } else {\n                if (horde.blueprint) {\n                    const blueprint = BLUE.get(horde.blueprint);\n                    const newData = new BuildData(\n                        data.site,\n                        blueprint,\n                        data.machineNumber\n                    );\n                    const result = this._build(newData, x, y, null);\n                    newData.free();\n                    if (!result) {\n                        return false;\n                    }\n                }\n\n                const leader = HORDE.spawnHorde(horde, site, x, y, {\n                    machine: site.machineCount,\n                });\n                if (!leader) {\n                    success = false;\n                    this.log.onStepInstanceFail(\n                        data,\n                        buildStep,\n                        x,\n                        y,\n                        'Failed to build horde - ' + horde\n                    );\n                } else {\n                    // What to do now?\n                    didSomething = true;\n\n                    // leader adopts item...\n                    if (torch && buildStep.hordeTakesItem) {\n                        torchBearer = leader;\n                        torchBearer.item = torch;\n                        torch.x = -1;\n                        torch.y = -1;\n                    }\n\n                    if (horde.feature) {\n                        horde.feature(site, x, y);\n                    }\n\n                    if (buildStep.horde.feature) {\n                        buildStep.horde.feature(site, x, y);\n                    }\n                }\n            }\n        }\n\n        if (success && didSomething) {\n            // Mark the feature location as part of the machine, in case it is not already inside of it.\n            if (!data.blueprint.noInteriorFlag) {\n                site.setMachine(\n                    x,\n                    y,\n                    data.machineNumber,\n                    data.blueprint.isRoom\n                );\n            }\n\n            // Mark the feature location as impregnable if requested.\n            if (buildStep.impregnable) {\n                site.makeImpregnable(x, y);\n            }\n\n            this.log.onStepInstanceSuccess(data, buildStep, x, y);\n        } else if (didSomething) {\n            // roll back any changes?\n        }\n\n        return success && didSomething;\n    }\n}\n\n////////////////////////////////////////////////////\n// TODO - Change this!!!\n// const blue = BLUE.get(id | blue);\n// const result =  blue.buildAt(map, x, y);\n//\nexport function build(\n    blueprint: BlueType,\n    site: Site,\n    x: number,\n    y: number,\n    opts?: Partial<BuilderOptions>\n): BuildResult {\n    const builder = new Builder(opts);\n\n    return builder.build(site, blueprint, x, y);\n}\n"],"names":["install","make","Fl","Flags","FEATURE.make","DIRS","TILE.getTile","TILE.tileId","ANALYZE.analyze","Utils.directionOfDoorSite","SITE.chooseRandomDoorSites","TYPES.Room","TYPES.makeHall","SITE.computeDistanceMap","LOGGER.NullLogger","SITE.Site","ROOM.RoomDigger","ROOM.rooms","ROOM.ChoiceRoom","hall","HALL.dig","LOOP.LoopDigger","LAKE.Lakes","BRIDGE.Bridges","STAIRS.Stairs","LEVEL.Digger","STEP.BuildStep","STEP.StepFlags","BLUE.get","blueprints","BLUE.blueprints","BLUE.Flags","BLUE.pickCandidateLoc","BLUE.prepareInterior","SITE.clearInteriorFlag","BLUE.markCandidates","SITE.siteDisruptedBy","SITE.siteDisruptedSize","STEP.calcDistanceBound","SITE.siteDisruptedByXY","ITEM.pickItem","ITEM.makeItem","HORDE.pickHorde","HORDE.spawnHorde"],"mappings":"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"}